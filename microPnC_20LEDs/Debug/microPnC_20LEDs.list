
microPnC_20LEDs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000023bc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080024c8  080024c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024e8  080024e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080024e8  080024e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024e8  080024e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024e8  080024e8  000124e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024ec  080024ec  000124ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080024f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  20000074  08002564  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000110  08002564  00020110  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f69  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019fa  00000000  00000000  00029006  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b28  00000000  00000000  0002aa00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a30  00000000  00000000  0002b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001781a  00000000  00000000  0002bf58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b625  00000000  00000000  00043772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087786  00000000  00000000  0004ed97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000d651d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002f54  00000000  00000000  000d6570  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000074 	.word	0x20000074
 8000128:	00000000 	.word	0x00000000
 800012c:	080024b0 	.word	0x080024b0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000078 	.word	0x20000078
 8000148:	080024b0 	.word	0x080024b0

0800014c <Create_Copy_Buffer>:
static uint8_t ledGreenIndex 		= 	1;

uint8_t Get_Bit_Value(uint8_t data, uint8_t index){
	return (data >> index) & 0x01;
}
uint8_t** Create_Copy_Buffer(uint8_t* buffer, uint8_t size, uint8_t numberCopy){
 800014c:	b590      	push	{r4, r7, lr}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	460b      	mov	r3, r1
 8000156:	70fb      	strb	r3, [r7, #3]
 8000158:	4613      	mov	r3, r2
 800015a:	70bb      	strb	r3, [r7, #2]
	uint8_t largeIndex, smallIndex;
	uint8_t** copyBuffer = (uint8_t**)malloc(numberCopy);
 800015c:	78bb      	ldrb	r3, [r7, #2]
 800015e:	4618      	mov	r0, r3
 8000160:	f002 f894 	bl	800228c <malloc>
 8000164:	4603      	mov	r3, r0
 8000166:	60bb      	str	r3, [r7, #8]
	for (largeIndex = 0; largeIndex < numberCopy; largeIndex++){
 8000168:	2300      	movs	r3, #0
 800016a:	73fb      	strb	r3, [r7, #15]
 800016c:	e022      	b.n	80001b4 <Create_Copy_Buffer+0x68>
		copyBuffer[largeIndex] = (uint8_t*)malloc(size);
 800016e:	78f9      	ldrb	r1, [r7, #3]
 8000170:	7bfb      	ldrb	r3, [r7, #15]
 8000172:	009b      	lsls	r3, r3, #2
 8000174:	68ba      	ldr	r2, [r7, #8]
 8000176:	18d4      	adds	r4, r2, r3
 8000178:	4608      	mov	r0, r1
 800017a:	f002 f887 	bl	800228c <malloc>
 800017e:	4603      	mov	r3, r0
 8000180:	6023      	str	r3, [r4, #0]
		for (smallIndex = 0; smallIndex < size; smallIndex++){
 8000182:	2300      	movs	r3, #0
 8000184:	73bb      	strb	r3, [r7, #14]
 8000186:	e00e      	b.n	80001a6 <Create_Copy_Buffer+0x5a>
			copyBuffer[largeIndex][smallIndex] = buffer[smallIndex];
 8000188:	7bbb      	ldrb	r3, [r7, #14]
 800018a:	687a      	ldr	r2, [r7, #4]
 800018c:	441a      	add	r2, r3
 800018e:	7bfb      	ldrb	r3, [r7, #15]
 8000190:	009b      	lsls	r3, r3, #2
 8000192:	68b9      	ldr	r1, [r7, #8]
 8000194:	440b      	add	r3, r1
 8000196:	6819      	ldr	r1, [r3, #0]
 8000198:	7bbb      	ldrb	r3, [r7, #14]
 800019a:	440b      	add	r3, r1
 800019c:	7812      	ldrb	r2, [r2, #0]
 800019e:	701a      	strb	r2, [r3, #0]
		for (smallIndex = 0; smallIndex < size; smallIndex++){
 80001a0:	7bbb      	ldrb	r3, [r7, #14]
 80001a2:	3301      	adds	r3, #1
 80001a4:	73bb      	strb	r3, [r7, #14]
 80001a6:	7bba      	ldrb	r2, [r7, #14]
 80001a8:	78fb      	ldrb	r3, [r7, #3]
 80001aa:	429a      	cmp	r2, r3
 80001ac:	d3ec      	bcc.n	8000188 <Create_Copy_Buffer+0x3c>
	for (largeIndex = 0; largeIndex < numberCopy; largeIndex++){
 80001ae:	7bfb      	ldrb	r3, [r7, #15]
 80001b0:	3301      	adds	r3, #1
 80001b2:	73fb      	strb	r3, [r7, #15]
 80001b4:	7bfa      	ldrb	r2, [r7, #15]
 80001b6:	78bb      	ldrb	r3, [r7, #2]
 80001b8:	429a      	cmp	r2, r3
 80001ba:	d3d8      	bcc.n	800016e <Create_Copy_Buffer+0x22>
		}
	}
	return copyBuffer;
 80001bc:	68bb      	ldr	r3, [r7, #8]
}
 80001be:	4618      	mov	r0, r3
 80001c0:	3714      	adds	r7, #20
 80001c2:	46bd      	mov	sp, r7
 80001c4:	bd90      	pop	{r4, r7, pc}

080001c6 <Free_Copy_Buffer>:
void Free_Copy_Buffer(uint8_t** multipleBuffer, uint8_t numberCopy){
 80001c6:	b580      	push	{r7, lr}
 80001c8:	b084      	sub	sp, #16
 80001ca:	af00      	add	r7, sp, #0
 80001cc:	6078      	str	r0, [r7, #4]
 80001ce:	460b      	mov	r3, r1
 80001d0:	70fb      	strb	r3, [r7, #3]
	uint8_t largeIndex;
	for (largeIndex = 0 ; largeIndex < numberCopy; largeIndex++){
 80001d2:	2300      	movs	r3, #0
 80001d4:	73fb      	strb	r3, [r7, #15]
 80001d6:	e00a      	b.n	80001ee <Free_Copy_Buffer+0x28>
		free(multipleBuffer[largeIndex]);
 80001d8:	7bfb      	ldrb	r3, [r7, #15]
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	687a      	ldr	r2, [r7, #4]
 80001de:	4413      	add	r3, r2
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	4618      	mov	r0, r3
 80001e4:	f002 f85a 	bl	800229c <free>
	for (largeIndex = 0 ; largeIndex < numberCopy; largeIndex++){
 80001e8:	7bfb      	ldrb	r3, [r7, #15]
 80001ea:	3301      	adds	r3, #1
 80001ec:	73fb      	strb	r3, [r7, #15]
 80001ee:	7bfa      	ldrb	r2, [r7, #15]
 80001f0:	78fb      	ldrb	r3, [r7, #3]
 80001f2:	429a      	cmp	r2, r3
 80001f4:	d3f0      	bcc.n	80001d8 <Free_Copy_Buffer+0x12>
	}
	free(multipleBuffer);
 80001f6:	6878      	ldr	r0, [r7, #4]
 80001f8:	f002 f850 	bl	800229c <free>
}
 80001fc:	bf00      	nop
 80001fe:	3710      	adds	r7, #16
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}

08000204 <Update_Red_Index>:
void Update_Red_Index(uint8_t size){
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	71fb      	strb	r3, [r7, #7]
	ledRedIndex = (ledRedIndex + SPACE_BETWEEN_SAME_LED) % size;
 800020e:	4b08      	ldr	r3, [pc, #32]	; (8000230 <Update_Red_Index+0x2c>)
 8000210:	781b      	ldrb	r3, [r3, #0]
 8000212:	3302      	adds	r3, #2
 8000214:	79fa      	ldrb	r2, [r7, #7]
 8000216:	fb93 f1f2 	sdiv	r1, r3, r2
 800021a:	fb01 f202 	mul.w	r2, r1, r2
 800021e:	1a9b      	subs	r3, r3, r2
 8000220:	b2da      	uxtb	r2, r3
 8000222:	4b03      	ldr	r3, [pc, #12]	; (8000230 <Update_Red_Index+0x2c>)
 8000224:	701a      	strb	r2, [r3, #0]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	bc80      	pop	{r7}
 800022e:	4770      	bx	lr
 8000230:	20000090 	.word	0x20000090

08000234 <Update_Green_Index>:
void Update_Green_Index(uint8_t size){
 8000234:	b480      	push	{r7}
 8000236:	b083      	sub	sp, #12
 8000238:	af00      	add	r7, sp, #0
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	ledGreenIndex = (ledGreenIndex + SPACE_BETWEEN_SAME_LED) % size;
 800023e:	4b08      	ldr	r3, [pc, #32]	; (8000260 <Update_Green_Index+0x2c>)
 8000240:	781b      	ldrb	r3, [r3, #0]
 8000242:	3302      	adds	r3, #2
 8000244:	79fa      	ldrb	r2, [r7, #7]
 8000246:	fb93 f1f2 	sdiv	r1, r3, r2
 800024a:	fb01 f202 	mul.w	r2, r1, r2
 800024e:	1a9b      	subs	r3, r3, r2
 8000250:	b2da      	uxtb	r2, r3
 8000252:	4b03      	ldr	r3, [pc, #12]	; (8000260 <Update_Green_Index+0x2c>)
 8000254:	701a      	strb	r2, [r3, #0]
}
 8000256:	bf00      	nop
 8000258:	370c      	adds	r7, #12
 800025a:	46bd      	mov	sp, r7
 800025c:	bc80      	pop	{r7}
 800025e:	4770      	bx	lr
 8000260:	20000000 	.word	0x20000000

08000264 <Rollback_Green_Index>:
void Rollback_Green_Index(uint8_t size){
 8000264:	b480      	push	{r7}
 8000266:	b083      	sub	sp, #12
 8000268:	af00      	add	r7, sp, #0
 800026a:	4603      	mov	r3, r0
 800026c:	71fb      	strb	r3, [r7, #7]
	if (ledGreenIndex <= 1)
 800026e:	4b0f      	ldr	r3, [pc, #60]	; (80002ac <Rollback_Green_Index+0x48>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b01      	cmp	r3, #1
 8000274:	d809      	bhi.n	800028a <Rollback_Green_Index+0x26>
		ledGreenIndex += size - SPACE_BETWEEN_SAME_LED;
 8000276:	4b0d      	ldr	r3, [pc, #52]	; (80002ac <Rollback_Green_Index+0x48>)
 8000278:	781a      	ldrb	r2, [r3, #0]
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4413      	add	r3, r2
 800027e:	b2db      	uxtb	r3, r3
 8000280:	3b02      	subs	r3, #2
 8000282:	b2da      	uxtb	r2, r3
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <Rollback_Green_Index+0x48>)
 8000286:	701a      	strb	r2, [r3, #0]
	else
		ledGreenIndex = (ledGreenIndex - SPACE_BETWEEN_SAME_LED) % size;
}
 8000288:	e00b      	b.n	80002a2 <Rollback_Green_Index+0x3e>
		ledGreenIndex = (ledGreenIndex - SPACE_BETWEEN_SAME_LED) % size;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <Rollback_Green_Index+0x48>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	3b02      	subs	r3, #2
 8000290:	79fa      	ldrb	r2, [r7, #7]
 8000292:	fb93 f1f2 	sdiv	r1, r3, r2
 8000296:	fb01 f202 	mul.w	r2, r1, r2
 800029a:	1a9b      	subs	r3, r3, r2
 800029c:	b2da      	uxtb	r2, r3
 800029e:	4b03      	ldr	r3, [pc, #12]	; (80002ac <Rollback_Green_Index+0x48>)
 80002a0:	701a      	strb	r2, [r3, #0]
}
 80002a2:	bf00      	nop
 80002a4:	370c      	adds	r7, #12
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr
 80002ac:	20000000 	.word	0x20000000

080002b0 <Rollback_Red_Index>:
void Rollback_Red_Index (uint8_t size){
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
	if (ledRedIndex <= 0)
 80002ba:	4b0f      	ldr	r3, [pc, #60]	; (80002f8 <Rollback_Red_Index+0x48>)
 80002bc:	781b      	ldrb	r3, [r3, #0]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d109      	bne.n	80002d6 <Rollback_Red_Index+0x26>
		ledRedIndex += size - SPACE_BETWEEN_SAME_LED;
 80002c2:	4b0d      	ldr	r3, [pc, #52]	; (80002f8 <Rollback_Red_Index+0x48>)
 80002c4:	781a      	ldrb	r2, [r3, #0]
 80002c6:	79fb      	ldrb	r3, [r7, #7]
 80002c8:	4413      	add	r3, r2
 80002ca:	b2db      	uxtb	r3, r3
 80002cc:	3b02      	subs	r3, #2
 80002ce:	b2da      	uxtb	r2, r3
 80002d0:	4b09      	ldr	r3, [pc, #36]	; (80002f8 <Rollback_Red_Index+0x48>)
 80002d2:	701a      	strb	r2, [r3, #0]
	else
		ledRedIndex = (ledRedIndex - SPACE_BETWEEN_SAME_LED) % size;
}
 80002d4:	e00b      	b.n	80002ee <Rollback_Red_Index+0x3e>
		ledRedIndex = (ledRedIndex - SPACE_BETWEEN_SAME_LED) % size;
 80002d6:	4b08      	ldr	r3, [pc, #32]	; (80002f8 <Rollback_Red_Index+0x48>)
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	3b02      	subs	r3, #2
 80002dc:	79fa      	ldrb	r2, [r7, #7]
 80002de:	fb93 f1f2 	sdiv	r1, r3, r2
 80002e2:	fb01 f202 	mul.w	r2, r1, r2
 80002e6:	1a9b      	subs	r3, r3, r2
 80002e8:	b2da      	uxtb	r2, r3
 80002ea:	4b03      	ldr	r3, [pc, #12]	; (80002f8 <Rollback_Red_Index+0x48>)
 80002ec:	701a      	strb	r2, [r3, #0]
}
 80002ee:	bf00      	nop
 80002f0:	370c      	adds	r7, #12
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bc80      	pop	{r7}
 80002f6:	4770      	bx	lr
 80002f8:	20000090 	.word	0x20000090

080002fc <Remove_Red_Index>:
void Remove_Red_Index(uint8_t* buffer, uint8_t size){
 80002fc:	b480      	push	{r7}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
	for (uint8_t index = 0; index < size; index = index + SPACE_BETWEEN_SAME_LED){
 8000308:	2300      	movs	r3, #0
 800030a:	73fb      	strb	r3, [r7, #15]
 800030c:	e007      	b.n	800031e <Remove_Red_Index+0x22>
		buffer[index] = LED_OFF;
 800030e:	7bfb      	ldrb	r3, [r7, #15]
 8000310:	687a      	ldr	r2, [r7, #4]
 8000312:	4413      	add	r3, r2
 8000314:	2200      	movs	r2, #0
 8000316:	701a      	strb	r2, [r3, #0]
	for (uint8_t index = 0; index < size; index = index + SPACE_BETWEEN_SAME_LED){
 8000318:	7bfb      	ldrb	r3, [r7, #15]
 800031a:	3302      	adds	r3, #2
 800031c:	73fb      	strb	r3, [r7, #15]
 800031e:	7bfa      	ldrb	r2, [r7, #15]
 8000320:	78fb      	ldrb	r3, [r7, #3]
 8000322:	429a      	cmp	r2, r3
 8000324:	d3f3      	bcc.n	800030e <Remove_Red_Index+0x12>
	}
}
 8000326:	bf00      	nop
 8000328:	bf00      	nop
 800032a:	3714      	adds	r7, #20
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr

08000332 <Remove_Green_Index>:
void Remove_Green_Index(uint8_t* buffer, uint8_t size){
 8000332:	b480      	push	{r7}
 8000334:	b085      	sub	sp, #20
 8000336:	af00      	add	r7, sp, #0
 8000338:	6078      	str	r0, [r7, #4]
 800033a:	460b      	mov	r3, r1
 800033c:	70fb      	strb	r3, [r7, #3]
	for (uint8_t index = 1; index < size; index = index + SPACE_BETWEEN_SAME_LED){
 800033e:	2301      	movs	r3, #1
 8000340:	73fb      	strb	r3, [r7, #15]
 8000342:	e007      	b.n	8000354 <Remove_Green_Index+0x22>
		buffer[index] = LED_OFF;
 8000344:	7bfb      	ldrb	r3, [r7, #15]
 8000346:	687a      	ldr	r2, [r7, #4]
 8000348:	4413      	add	r3, r2
 800034a:	2200      	movs	r2, #0
 800034c:	701a      	strb	r2, [r3, #0]
	for (uint8_t index = 1; index < size; index = index + SPACE_BETWEEN_SAME_LED){
 800034e:	7bfb      	ldrb	r3, [r7, #15]
 8000350:	3302      	adds	r3, #2
 8000352:	73fb      	strb	r3, [r7, #15]
 8000354:	7bfa      	ldrb	r2, [r7, #15]
 8000356:	78fb      	ldrb	r3, [r7, #3]
 8000358:	429a      	cmp	r2, r3
 800035a:	d3f3      	bcc.n	8000344 <Remove_Green_Index+0x12>
	}
}
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	3714      	adds	r7, #20
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <Toggle_Led>:
void Toggle_Led(uint8_t* state){
 8000368:	b480      	push	{r7}
 800036a:	b083      	sub	sp, #12
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
	if (*state == LED_ON){
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d103      	bne.n	8000380 <Toggle_Led+0x18>
		*state = LED_OFF;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	2200      	movs	r2, #0
 800037c:	701a      	strb	r2, [r3, #0]
	}
	else {
		*state = LED_ON;
	}
}
 800037e:	e002      	b.n	8000386 <Toggle_Led+0x1e>
		*state = LED_ON;
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	2201      	movs	r2, #1
 8000384:	701a      	strb	r2, [r3, #0]
}
 8000386:	bf00      	nop
 8000388:	370c      	adds	r7, #12
 800038a:	46bd      	mov	sp, r7
 800038c:	bc80      	pop	{r7}
 800038e:	4770      	bx	lr

08000390 <Red_Cummulative_Forward>:
		buffer[copyIndex] = copyBuffer[0][copyIndex] | copyBuffer[1][copyIndex];
	}
	Free_Copy_Buffer(copyBuffer, NUMBER_OF_LED_TYPE);
	return buffer;
}
uint8_t* Red_Cummulative_Forward (uint8_t* buffer, uint8_t size){
 8000390:	b580      	push	{r7, lr}
 8000392:	b082      	sub	sp, #8
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	460b      	mov	r3, r1
 800039a:	70fb      	strb	r3, [r7, #3]
	Toggle_Led(&buffer[ledRedIndex]);
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <Red_Cummulative_Forward+0x30>)
 800039e:	781b      	ldrb	r3, [r3, #0]
 80003a0:	461a      	mov	r2, r3
 80003a2:	687b      	ldr	r3, [r7, #4]
 80003a4:	4413      	add	r3, r2
 80003a6:	4618      	mov	r0, r3
 80003a8:	f7ff ffde 	bl	8000368 <Toggle_Led>
	Update_Red_Index(size);
 80003ac:	78fb      	ldrb	r3, [r7, #3]
 80003ae:	4618      	mov	r0, r3
 80003b0:	f7ff ff28 	bl	8000204 <Update_Red_Index>
	return buffer;
 80003b4:	687b      	ldr	r3, [r7, #4]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000090 	.word	0x20000090

080003c4 <Red_Cummulative_Backward>:
uint8_t* Red_Cummulative_Backward (uint8_t* buffer, uint8_t size){
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b084      	sub	sp, #16
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	460b      	mov	r3, r1
 80003ce:	70fb      	strb	r3, [r7, #3]
	uint8_t reverseIndex = size - ledRedIndex - SPACE_BETWEEN_SAME_LED;
 80003d0:	4b0a      	ldr	r3, [pc, #40]	; (80003fc <Red_Cummulative_Backward+0x38>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	78fa      	ldrb	r2, [r7, #3]
 80003d6:	1ad3      	subs	r3, r2, r3
 80003d8:	b2db      	uxtb	r3, r3
 80003da:	3b02      	subs	r3, #2
 80003dc:	73fb      	strb	r3, [r7, #15]
	Toggle_Led(&buffer[reverseIndex]);
 80003de:	7bfb      	ldrb	r3, [r7, #15]
 80003e0:	687a      	ldr	r2, [r7, #4]
 80003e2:	4413      	add	r3, r2
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ffbf 	bl	8000368 <Toggle_Led>
	Update_Red_Index(size);
 80003ea:	78fb      	ldrb	r3, [r7, #3]
 80003ec:	4618      	mov	r0, r3
 80003ee:	f7ff ff09 	bl	8000204 <Update_Red_Index>
	return buffer;
 80003f2:	687b      	ldr	r3, [r7, #4]
}
 80003f4:	4618      	mov	r0, r3
 80003f6:	3710      	adds	r7, #16
 80003f8:	46bd      	mov	sp, r7
 80003fa:	bd80      	pop	{r7, pc}
 80003fc:	20000090 	.word	0x20000090

08000400 <Green_Cummulative_Forward>:
uint8_t* Green_Cummulative_Forward (uint8_t* buffer, uint8_t size){
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
 8000406:	6078      	str	r0, [r7, #4]
 8000408:	460b      	mov	r3, r1
 800040a:	70fb      	strb	r3, [r7, #3]
	Toggle_Led(&buffer[ledGreenIndex]);
 800040c:	4b08      	ldr	r3, [pc, #32]	; (8000430 <Green_Cummulative_Forward+0x30>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	461a      	mov	r2, r3
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	4413      	add	r3, r2
 8000416:	4618      	mov	r0, r3
 8000418:	f7ff ffa6 	bl	8000368 <Toggle_Led>
	Update_Green_Index(size);
 800041c:	78fb      	ldrb	r3, [r7, #3]
 800041e:	4618      	mov	r0, r3
 8000420:	f7ff ff08 	bl	8000234 <Update_Green_Index>
	return buffer;
 8000424:	687b      	ldr	r3, [r7, #4]
}
 8000426:	4618      	mov	r0, r3
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	20000000 	.word	0x20000000

08000434 <Green_Cummulative_Backward>:
uint8_t* Green_Cummulative_Backward (uint8_t* buffer, uint8_t size){
 8000434:	b580      	push	{r7, lr}
 8000436:	b084      	sub	sp, #16
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	460b      	mov	r3, r1
 800043e:	70fb      	strb	r3, [r7, #3]
	uint8_t reverseIndex = size - ledGreenIndex;
 8000440:	4b09      	ldr	r3, [pc, #36]	; (8000468 <Green_Cummulative_Backward+0x34>)
 8000442:	781b      	ldrb	r3, [r3, #0]
 8000444:	78fa      	ldrb	r2, [r7, #3]
 8000446:	1ad3      	subs	r3, r2, r3
 8000448:	73fb      	strb	r3, [r7, #15]
	Toggle_Led(&buffer[reverseIndex]);
 800044a:	7bfb      	ldrb	r3, [r7, #15]
 800044c:	687a      	ldr	r2, [r7, #4]
 800044e:	4413      	add	r3, r2
 8000450:	4618      	mov	r0, r3
 8000452:	f7ff ff89 	bl	8000368 <Toggle_Led>
	Update_Green_Index(size);
 8000456:	78fb      	ldrb	r3, [r7, #3]
 8000458:	4618      	mov	r0, r3
 800045a:	f7ff feeb 	bl	8000234 <Update_Green_Index>
	return buffer;
 800045e:	687b      	ldr	r3, [r7, #4]
}
 8000460:	4618      	mov	r0, r3
 8000462:	3710      	adds	r7, #16
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}
 8000468:	20000000 	.word	0x20000000

0800046c <All_Led_Cummulative_Forward>:
		buffer[copyIndex] = copyBuffer[0][copyIndex] | copyBuffer[1][copyIndex];
	}
	Free_Copy_Buffer(copyBuffer, NUMBER_OF_LED_TYPE);
	return buffer;
}
uint8_t* All_Led_Cummulative_Forward(uint8_t* buffer, uint8_t size){
 800046c:	b590      	push	{r4, r7, lr}
 800046e:	b085      	sub	sp, #20
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	460b      	mov	r3, r1
 8000476:	70fb      	strb	r3, [r7, #3]
	uint8_t copyIndex;
	uint8_t** copyBuffer = Create_Copy_Buffer(buffer, size, NUMBER_OF_LED_TYPE);
 8000478:	78fb      	ldrb	r3, [r7, #3]
 800047a:	2202      	movs	r2, #2
 800047c:	4619      	mov	r1, r3
 800047e:	6878      	ldr	r0, [r7, #4]
 8000480:	f7ff fe64 	bl	800014c <Create_Copy_Buffer>
 8000484:	60b8      	str	r0, [r7, #8]
	Remove_Green_Index(copyBuffer[0], size);
 8000486:	68bb      	ldr	r3, [r7, #8]
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	78fa      	ldrb	r2, [r7, #3]
 800048c:	4611      	mov	r1, r2
 800048e:	4618      	mov	r0, r3
 8000490:	f7ff ff4f 	bl	8000332 <Remove_Green_Index>
	Remove_Red_Index(copyBuffer[1], size);
 8000494:	68bb      	ldr	r3, [r7, #8]
 8000496:	3304      	adds	r3, #4
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	78fa      	ldrb	r2, [r7, #3]
 800049c:	4611      	mov	r1, r2
 800049e:	4618      	mov	r0, r3
 80004a0:	f7ff ff2c 	bl	80002fc <Remove_Red_Index>
	copyBuffer[0] 	= 	Red_Cummulative_Forward(copyBuffer[0], size);
 80004a4:	68bb      	ldr	r3, [r7, #8]
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	78fa      	ldrb	r2, [r7, #3]
 80004aa:	4611      	mov	r1, r2
 80004ac:	4618      	mov	r0, r3
 80004ae:	f7ff ff6f 	bl	8000390 <Red_Cummulative_Forward>
 80004b2:	4602      	mov	r2, r0
 80004b4:	68bb      	ldr	r3, [r7, #8]
 80004b6:	601a      	str	r2, [r3, #0]
	copyBuffer[1] 	= 	Green_Cummulative_Forward(copyBuffer[1], size);
 80004b8:	68bb      	ldr	r3, [r7, #8]
 80004ba:	3304      	adds	r3, #4
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	68bb      	ldr	r3, [r7, #8]
 80004c0:	1d1c      	adds	r4, r3, #4
 80004c2:	78fb      	ldrb	r3, [r7, #3]
 80004c4:	4619      	mov	r1, r3
 80004c6:	4610      	mov	r0, r2
 80004c8:	f7ff ff9a 	bl	8000400 <Green_Cummulative_Forward>
 80004cc:	4603      	mov	r3, r0
 80004ce:	6023      	str	r3, [r4, #0]
	for (copyIndex = 0; copyIndex < size; copyIndex++){
 80004d0:	2300      	movs	r3, #0
 80004d2:	73fb      	strb	r3, [r7, #15]
 80004d4:	e013      	b.n	80004fe <All_Led_Cummulative_Forward+0x92>
		buffer[copyIndex] = copyBuffer[0][copyIndex] | copyBuffer[1][copyIndex];
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	681a      	ldr	r2, [r3, #0]
 80004da:	7bfb      	ldrb	r3, [r7, #15]
 80004dc:	4413      	add	r3, r2
 80004de:	7819      	ldrb	r1, [r3, #0]
 80004e0:	68bb      	ldr	r3, [r7, #8]
 80004e2:	3304      	adds	r3, #4
 80004e4:	681a      	ldr	r2, [r3, #0]
 80004e6:	7bfb      	ldrb	r3, [r7, #15]
 80004e8:	4413      	add	r3, r2
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	7bfb      	ldrb	r3, [r7, #15]
 80004ee:	6878      	ldr	r0, [r7, #4]
 80004f0:	4403      	add	r3, r0
 80004f2:	430a      	orrs	r2, r1
 80004f4:	b2d2      	uxtb	r2, r2
 80004f6:	701a      	strb	r2, [r3, #0]
	for (copyIndex = 0; copyIndex < size; copyIndex++){
 80004f8:	7bfb      	ldrb	r3, [r7, #15]
 80004fa:	3301      	adds	r3, #1
 80004fc:	73fb      	strb	r3, [r7, #15]
 80004fe:	7bfa      	ldrb	r2, [r7, #15]
 8000500:	78fb      	ldrb	r3, [r7, #3]
 8000502:	429a      	cmp	r2, r3
 8000504:	d3e7      	bcc.n	80004d6 <All_Led_Cummulative_Forward+0x6a>
	}
	Free_Copy_Buffer(copyBuffer, NUMBER_OF_LED_TYPE);
 8000506:	2102      	movs	r1, #2
 8000508:	68b8      	ldr	r0, [r7, #8]
 800050a:	f7ff fe5c 	bl	80001c6 <Free_Copy_Buffer>
	return buffer;
 800050e:	687b      	ldr	r3, [r7, #4]
}
 8000510:	4618      	mov	r0, r3
 8000512:	3714      	adds	r7, #20
 8000514:	46bd      	mov	sp, r7
 8000516:	bd90      	pop	{r4, r7, pc}

08000518 <All_Led_Cummulative_Backward>:
uint8_t* All_Led_Cummulative_Backward(uint8_t* buffer, uint8_t size){
 8000518:	b590      	push	{r4, r7, lr}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
 8000520:	460b      	mov	r3, r1
 8000522:	70fb      	strb	r3, [r7, #3]
	uint8_t copyIndex;
	uint8_t** copyBuffer = Create_Copy_Buffer(buffer, size, NUMBER_OF_LED_TYPE);
 8000524:	78fb      	ldrb	r3, [r7, #3]
 8000526:	2202      	movs	r2, #2
 8000528:	4619      	mov	r1, r3
 800052a:	6878      	ldr	r0, [r7, #4]
 800052c:	f7ff fe0e 	bl	800014c <Create_Copy_Buffer>
 8000530:	60b8      	str	r0, [r7, #8]
	Remove_Green_Index(copyBuffer[0], size);
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	78fa      	ldrb	r2, [r7, #3]
 8000538:	4611      	mov	r1, r2
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff fef9 	bl	8000332 <Remove_Green_Index>
	Remove_Red_Index(copyBuffer[1], size);
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	3304      	adds	r3, #4
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	78fa      	ldrb	r2, [r7, #3]
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f7ff fed6 	bl	80002fc <Remove_Red_Index>
	copyBuffer[0] 	= 	Red_Cummulative_Backward(copyBuffer[0], size);
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	78fa      	ldrb	r2, [r7, #3]
 8000556:	4611      	mov	r1, r2
 8000558:	4618      	mov	r0, r3
 800055a:	f7ff ff33 	bl	80003c4 <Red_Cummulative_Backward>
 800055e:	4602      	mov	r2, r0
 8000560:	68bb      	ldr	r3, [r7, #8]
 8000562:	601a      	str	r2, [r3, #0]
	copyBuffer[1] 	= 	Green_Cummulative_Backward(copyBuffer[1], size);
 8000564:	68bb      	ldr	r3, [r7, #8]
 8000566:	3304      	adds	r3, #4
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	68bb      	ldr	r3, [r7, #8]
 800056c:	1d1c      	adds	r4, r3, #4
 800056e:	78fb      	ldrb	r3, [r7, #3]
 8000570:	4619      	mov	r1, r3
 8000572:	4610      	mov	r0, r2
 8000574:	f7ff ff5e 	bl	8000434 <Green_Cummulative_Backward>
 8000578:	4603      	mov	r3, r0
 800057a:	6023      	str	r3, [r4, #0]
	for (copyIndex = 0; copyIndex < size; copyIndex++){
 800057c:	2300      	movs	r3, #0
 800057e:	73fb      	strb	r3, [r7, #15]
 8000580:	e013      	b.n	80005aa <All_Led_Cummulative_Backward+0x92>
		buffer[copyIndex] = copyBuffer[0][copyIndex] | copyBuffer[1][copyIndex];
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	7bfb      	ldrb	r3, [r7, #15]
 8000588:	4413      	add	r3, r2
 800058a:	7819      	ldrb	r1, [r3, #0]
 800058c:	68bb      	ldr	r3, [r7, #8]
 800058e:	3304      	adds	r3, #4
 8000590:	681a      	ldr	r2, [r3, #0]
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	4413      	add	r3, r2
 8000596:	781a      	ldrb	r2, [r3, #0]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	6878      	ldr	r0, [r7, #4]
 800059c:	4403      	add	r3, r0
 800059e:	430a      	orrs	r2, r1
 80005a0:	b2d2      	uxtb	r2, r2
 80005a2:	701a      	strb	r2, [r3, #0]
	for (copyIndex = 0; copyIndex < size; copyIndex++){
 80005a4:	7bfb      	ldrb	r3, [r7, #15]
 80005a6:	3301      	adds	r3, #1
 80005a8:	73fb      	strb	r3, [r7, #15]
 80005aa:	7bfa      	ldrb	r2, [r7, #15]
 80005ac:	78fb      	ldrb	r3, [r7, #3]
 80005ae:	429a      	cmp	r2, r3
 80005b0:	d3e7      	bcc.n	8000582 <All_Led_Cummulative_Backward+0x6a>
	}
	Free_Copy_Buffer(copyBuffer, NUMBER_OF_LED_TYPE);
 80005b2:	2102      	movs	r1, #2
 80005b4:	68b8      	ldr	r0, [r7, #8]
 80005b6:	f7ff fe06 	bl	80001c6 <Free_Copy_Buffer>
	return buffer;
 80005ba:	687b      	ldr	r3, [r7, #4]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3714      	adds	r7, #20
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd90      	pop	{r4, r7, pc}

080005c4 <Half_Mixing_Alternative>:
uint8_t* Half_Mixing_Alternative(uint8_t* buffer, uint8_t size){
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	uint8_t copyIndex;
	uint8_t** copyBuffer = Create_Copy_Buffer(buffer, size, NUMBER_OF_LED_TYPE);
 80005d0:	78fb      	ldrb	r3, [r7, #3]
 80005d2:	2202      	movs	r2, #2
 80005d4:	4619      	mov	r1, r3
 80005d6:	6878      	ldr	r0, [r7, #4]
 80005d8:	f7ff fdb8 	bl	800014c <Create_Copy_Buffer>
 80005dc:	60b8      	str	r0, [r7, #8]
	Remove_Green_Index(copyBuffer[0], size);
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	78fa      	ldrb	r2, [r7, #3]
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fea3 	bl	8000332 <Remove_Green_Index>
	Remove_Red_Index(copyBuffer[1], size);
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	3304      	adds	r3, #4
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	78fa      	ldrb	r2, [r7, #3]
 80005f4:	4611      	mov	r1, r2
 80005f6:	4618      	mov	r0, r3
 80005f8:	f7ff fe80 	bl	80002fc <Remove_Red_Index>
	copyBuffer[0] 	= 	All_Led_Cummulative_Backward(copyBuffer[0], size);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	78fa      	ldrb	r2, [r7, #3]
 8000602:	4611      	mov	r1, r2
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff87 	bl	8000518 <All_Led_Cummulative_Backward>
 800060a:	4602      	mov	r2, r0
 800060c:	68bb      	ldr	r3, [r7, #8]
 800060e:	601a      	str	r2, [r3, #0]
	Rollback_Green_Index(size);
 8000610:	78fb      	ldrb	r3, [r7, #3]
 8000612:	4618      	mov	r0, r3
 8000614:	f7ff fe26 	bl	8000264 <Rollback_Green_Index>
	Rollback_Red_Index(size);
 8000618:	78fb      	ldrb	r3, [r7, #3]
 800061a:	4618      	mov	r0, r3
 800061c:	f7ff fe48 	bl	80002b0 <Rollback_Red_Index>
	copyBuffer[1] 	= 	All_Led_Cummulative_Forward(copyBuffer[1], size);
 8000620:	68bb      	ldr	r3, [r7, #8]
 8000622:	3304      	adds	r3, #4
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	1d1c      	adds	r4, r3, #4
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	4619      	mov	r1, r3
 800062e:	4610      	mov	r0, r2
 8000630:	f7ff ff1c 	bl	800046c <All_Led_Cummulative_Forward>
 8000634:	4603      	mov	r3, r0
 8000636:	6023      	str	r3, [r4, #0]
	for (copyIndex = 0; copyIndex < size; copyIndex++){
 8000638:	2300      	movs	r3, #0
 800063a:	73fb      	strb	r3, [r7, #15]
 800063c:	e013      	b.n	8000666 <Half_Mixing_Alternative+0xa2>
		buffer[copyIndex] = copyBuffer[0][copyIndex] | copyBuffer[1][copyIndex];
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	4413      	add	r3, r2
 8000646:	7819      	ldrb	r1, [r3, #0]
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	3304      	adds	r3, #4
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	7bfb      	ldrb	r3, [r7, #15]
 8000650:	4413      	add	r3, r2
 8000652:	781a      	ldrb	r2, [r3, #0]
 8000654:	7bfb      	ldrb	r3, [r7, #15]
 8000656:	6878      	ldr	r0, [r7, #4]
 8000658:	4403      	add	r3, r0
 800065a:	430a      	orrs	r2, r1
 800065c:	b2d2      	uxtb	r2, r2
 800065e:	701a      	strb	r2, [r3, #0]
	for (copyIndex = 0; copyIndex < size; copyIndex++){
 8000660:	7bfb      	ldrb	r3, [r7, #15]
 8000662:	3301      	adds	r3, #1
 8000664:	73fb      	strb	r3, [r7, #15]
 8000666:	7bfa      	ldrb	r2, [r7, #15]
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	429a      	cmp	r2, r3
 800066c:	d3e7      	bcc.n	800063e <Half_Mixing_Alternative+0x7a>
	}
	Free_Copy_Buffer(copyBuffer, NUMBER_OF_LED_TYPE);
 800066e:	2102      	movs	r1, #2
 8000670:	68b8      	ldr	r0, [r7, #8]
 8000672:	f7ff fda8 	bl	80001c6 <Free_Copy_Buffer>
	return buffer;
 8000676:	687b      	ldr	r3, [r7, #4]
}
 8000678:	4618      	mov	r0, r3
 800067a:	3714      	adds	r7, #20
 800067c:	46bd      	mov	sp, r7
 800067e:	bd90      	pop	{r4, r7, pc}

08000680 <MX_GPIO_Init>:
/** Configure pins
     PB10   ------> USART3_TX
     PB11   ------> USART3_RX
*/
void MX_GPIO_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	f107 0310 	add.w	r3, r7, #16
 800068a:	2200      	movs	r2, #0
 800068c:	601a      	str	r2, [r3, #0]
 800068e:	605a      	str	r2, [r3, #4]
 8000690:	609a      	str	r2, [r3, #8]
 8000692:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000694:	4b3d      	ldr	r3, [pc, #244]	; (800078c <MX_GPIO_Init+0x10c>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a3c      	ldr	r2, [pc, #240]	; (800078c <MX_GPIO_Init+0x10c>)
 800069a:	f043 0310 	orr.w	r3, r3, #16
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b3a      	ldr	r3, [pc, #232]	; (800078c <MX_GPIO_Init+0x10c>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0310 	and.w	r3, r3, #16
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <MX_GPIO_Init+0x10c>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a36      	ldr	r2, [pc, #216]	; (800078c <MX_GPIO_Init+0x10c>)
 80006b2:	f043 0308 	orr.w	r3, r3, #8
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <MX_GPIO_Init+0x10c>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0308 	and.w	r3, r3, #8
 80006c0:	60bb      	str	r3, [r7, #8]
 80006c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c4:	4b31      	ldr	r3, [pc, #196]	; (800078c <MX_GPIO_Init+0x10c>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a30      	ldr	r2, [pc, #192]	; (800078c <MX_GPIO_Init+0x10c>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b2e      	ldr	r3, [pc, #184]	; (800078c <MX_GPIO_Init+0x10c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0320 	and.w	r3, r3, #32
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_CLK_Pin|LED_LE_Pin|LED_OE_Pin|LED_SDI_Pin, GPIO_PIN_RESET);
 80006dc:	2200      	movs	r2, #0
 80006de:	2178      	movs	r1, #120	; 0x78
 80006e0:	482b      	ldr	r0, [pc, #172]	; (8000790 <MX_GPIO_Init+0x110>)
 80006e2:	f000 fdaf 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PRO_VER_GPIO_Port, PRO_VER_Pin, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2104      	movs	r1, #4
 80006ea:	482a      	ldr	r0, [pc, #168]	; (8000794 <MX_GPIO_Init+0x114>)
 80006ec:	f000 fdaa 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2104      	movs	r1, #4
 80006f4:	4828      	ldr	r0, [pc, #160]	; (8000798 <MX_GPIO_Init+0x118>)
 80006f6:	f000 fda5 	bl	8001244 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_CLK_Pin|LED_LE_Pin|LED_OE_Pin|LED_SDI_Pin;
 80006fa:	2378      	movs	r3, #120	; 0x78
 80006fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fe:	2301      	movs	r3, #1
 8000700:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2302      	movs	r3, #2
 8000708:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070a:	f107 0310 	add.w	r3, r7, #16
 800070e:	4619      	mov	r1, r3
 8000710:	481f      	ldr	r0, [pc, #124]	; (8000790 <MX_GPIO_Init+0x110>)
 8000712:	f000 fc13 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PRO_VER_Pin;
 8000716:	2304      	movs	r3, #4
 8000718:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800071a:	2301      	movs	r3, #1
 800071c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	2302      	movs	r3, #2
 8000724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PRO_VER_GPIO_Port, &GPIO_InitStruct);
 8000726:	f107 0310 	add.w	r3, r7, #16
 800072a:	4619      	mov	r1, r3
 800072c:	4819      	ldr	r0, [pc, #100]	; (8000794 <MX_GPIO_Init+0x114>)
 800072e:	f000 fc05 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000736:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000738:	2302      	movs	r3, #2
 800073a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4813      	ldr	r0, [pc, #76]	; (8000794 <MX_GPIO_Init+0x114>)
 8000748:	f000 fbf8 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800074c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000750:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800075a:	f107 0310 	add.w	r3, r7, #16
 800075e:	4619      	mov	r1, r3
 8000760:	480c      	ldr	r0, [pc, #48]	; (8000794 <MX_GPIO_Init+0x114>)
 8000762:	f000 fbeb 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RELAY_Pin;
 8000766:	2304      	movs	r3, #4
 8000768:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	2301      	movs	r3, #1
 800076c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076e:	2300      	movs	r3, #0
 8000770:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000772:	2302      	movs	r3, #2
 8000774:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	4806      	ldr	r0, [pc, #24]	; (8000798 <MX_GPIO_Init+0x118>)
 800077e:	f000 fbdd 	bl	8000f3c <HAL_GPIO_Init>

}
 8000782:	bf00      	nop
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	40011000 	.word	0x40011000
 8000794:	40010c00 	.word	0x40010c00
 8000798:	40011400 	.word	0x40011400

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a0:	f000 fa5c 	bl	8000c5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a4:	f000 f81c 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007a8:	f7ff ff6a 	bl	8000680 <MX_GPIO_Init>
  MX_TIM2_Init();
 80007ac:	f000 f9c0 	bl	8000b30 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80007b0:	4809      	ldr	r0, [pc, #36]	; (80007d8 <main+0x3c>)
 80007b2:	f001 f997 	bl	8001ae4 <HAL_TIM_Base_Start_IT>
  Output_Enable();
 80007b6:	f000 f873 	bl	80008a0 <Output_Enable>
  Relay_Enable();
 80007ba:	f000 f84d 	bl	8000858 <Relay_Enable>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  Set_Timer();
 80007be:	f000 f8fd 	bl	80009bc <Set_Timer>
  while (1)
  {
	  if (timerFlag == 1){
 80007c2:	4b06      	ldr	r3, [pc, #24]	; (80007dc <main+0x40>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d1fb      	bne.n	80007c2 <main+0x26>
		  Set_Timer();
 80007ca:	f000 f8f7 	bl	80009bc <Set_Timer>
		  Update_Led_Driver_Buffer();
 80007ce:	f000 f8db 	bl	8000988 <Update_Led_Driver_Buffer>
		  Led_Display();
 80007d2:	f000 f8b7 	bl	8000944 <Led_Display>
	  if (timerFlag == 1){
 80007d6:	e7f4      	b.n	80007c2 <main+0x26>
 80007d8:	200000b4 	.word	0x200000b4
 80007dc:	200000ac 	.word	0x200000ac

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b090      	sub	sp, #64	; 0x40
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0318 	add.w	r3, r7, #24
 80007ea:	2228      	movs	r2, #40	; 0x28
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 fd5c 	bl	80022ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000806:	2301      	movs	r3, #1
 8000808:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080a:	2310      	movs	r3, #16
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800080e:	2300      	movs	r3, #0
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000812:	f107 0318 	add.w	r3, r7, #24
 8000816:	4618      	mov	r0, r3
 8000818:	f000 fd2c 	bl	8001274 <HAL_RCC_OscConfig>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000822:	f000 f8c5 	bl	80009b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000826:	230f      	movs	r3, #15
 8000828:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800082e:	2300      	movs	r3, #0
 8000830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000836:	2300      	movs	r3, #0
 8000838:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800083a:	1d3b      	adds	r3, r7, #4
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f000 ff9a 	bl	8001778 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800084a:	f000 f8b1 	bl	80009b0 <Error_Handler>
  }
}
 800084e:	bf00      	nop
 8000850:	3740      	adds	r7, #64	; 0x40
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <Relay_Enable>:

/* USER CODE BEGIN 4 */
static void Relay_Enable(void){
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, RESET);
 800085c:	2200      	movs	r2, #0
 800085e:	2104      	movs	r1, #4
 8000860:	4802      	ldr	r0, [pc, #8]	; (800086c <Relay_Enable+0x14>)
 8000862:	f000 fcef 	bl	8001244 <HAL_GPIO_WritePin>
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	40011400 	.word	0x40011400

08000870 <Latch_Enable>:
static void Latch_Enable(void){
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	2110      	movs	r1, #16
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <Latch_Enable+0x14>)
 800087a:	f000 fce3 	bl	8001244 <HAL_GPIO_WritePin>
}
 800087e:	bf00      	nop
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	40011000 	.word	0x40011000

08000888 <Latch_Disable>:
static void Latch_Disable(void){
 8000888:	b580      	push	{r7, lr}
 800088a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_LE_GPIO_Port, LED_LE_Pin, GPIO_PIN_SET);
 800088c:	2201      	movs	r2, #1
 800088e:	2110      	movs	r1, #16
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <Latch_Disable+0x14>)
 8000892:	f000 fcd7 	bl	8001244 <HAL_GPIO_WritePin>
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	40011000 	.word	0x40011000

080008a0 <Output_Enable>:
static void Output_Enable(void){
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_SET);
 80008a4:	2201      	movs	r2, #1
 80008a6:	2120      	movs	r1, #32
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <Output_Enable+0x14>)
 80008aa:	f000 fccb 	bl	8001244 <HAL_GPIO_WritePin>
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40011000 	.word	0x40011000

080008b8 <Clock_On>:
//static void Output_Disable(void){
//	HAL_GPIO_WritePin(LED_OE_GPIO_Port, LED_OE_Pin, GPIO_PIN_RESET);
//}
static void Clock_On(uint8_t count){
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
	if (count <= 0) return;
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d00b      	beq.n	80008e0 <Clock_On+0x28>
	while (count-- != 0) {
 80008c8:	e004      	b.n	80008d4 <Clock_On+0x1c>
		HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2108      	movs	r1, #8
 80008ce:	4806      	ldr	r0, [pc, #24]	; (80008e8 <Clock_On+0x30>)
 80008d0:	f000 fcb8 	bl	8001244 <HAL_GPIO_WritePin>
	while (count-- != 0) {
 80008d4:	79fb      	ldrb	r3, [r7, #7]
 80008d6:	1e5a      	subs	r2, r3, #1
 80008d8:	71fa      	strb	r2, [r7, #7]
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d1f5      	bne.n	80008ca <Clock_On+0x12>
 80008de:	e000      	b.n	80008e2 <Clock_On+0x2a>
	if (count <= 0) return;
 80008e0:	bf00      	nop
	}
}
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40011000 	.word	0x40011000

080008ec <Clock_Off>:
static void Clock_Off(uint8_t count){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	4603      	mov	r3, r0
 80008f4:	71fb      	strb	r3, [r7, #7]
	if (count <= 0) return;
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d00b      	beq.n	8000914 <Clock_Off+0x28>
	while (count-- != 0) {
 80008fc:	e004      	b.n	8000908 <Clock_Off+0x1c>
		HAL_GPIO_WritePin(LED_CLK_GPIO_Port, LED_CLK_Pin, GPIO_PIN_SET);
 80008fe:	2201      	movs	r2, #1
 8000900:	2108      	movs	r1, #8
 8000902:	4806      	ldr	r0, [pc, #24]	; (800091c <Clock_Off+0x30>)
 8000904:	f000 fc9e 	bl	8001244 <HAL_GPIO_WritePin>
	while (count-- != 0) {
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	1e5a      	subs	r2, r3, #1
 800090c:	71fa      	strb	r2, [r7, #7]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d1f5      	bne.n	80008fe <Clock_Off+0x12>
 8000912:	e000      	b.n	8000916 <Clock_Off+0x2a>
	if (count <= 0) return;
 8000914:	bf00      	nop
	}

}
 8000916:	3708      	adds	r7, #8
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40011000 	.word	0x40011000

08000920 <Data_Out>:
static void Data_Out(GPIO_PinState state){
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	4603      	mov	r3, r0
 8000928:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(LED_SDI_GPIO_Port, LED_SDI_Pin, state);
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	461a      	mov	r2, r3
 800092e:	2140      	movs	r1, #64	; 0x40
 8000930:	4803      	ldr	r0, [pc, #12]	; (8000940 <Data_Out+0x20>)
 8000932:	f000 fc87 	bl	8001244 <HAL_GPIO_WritePin>
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40011000 	.word	0x40011000

08000944 <Led_Display>:

void Led_Display(void){
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
	Latch_Disable();
 800094a:	f7ff ff9d 	bl	8000888 <Latch_Disable>
	for (uint8_t iter = 0; iter < NUMBER_OF_LED; iter++){
 800094e:	2300      	movs	r3, #0
 8000950:	71fb      	strb	r3, [r7, #7]
 8000952:	e00e      	b.n	8000972 <Led_Display+0x2e>
		Clock_Off(1);
 8000954:	2001      	movs	r0, #1
 8000956:	f7ff ffc9 	bl	80008ec <Clock_Off>
		Data_Out(ledDriverBuffer[iter]);
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	4a09      	ldr	r2, [pc, #36]	; (8000984 <Led_Display+0x40>)
 800095e:	5cd3      	ldrb	r3, [r2, r3]
 8000960:	4618      	mov	r0, r3
 8000962:	f7ff ffdd 	bl	8000920 <Data_Out>
		Clock_On(10);
 8000966:	200a      	movs	r0, #10
 8000968:	f7ff ffa6 	bl	80008b8 <Clock_On>
	for (uint8_t iter = 0; iter < NUMBER_OF_LED; iter++){
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	3301      	adds	r3, #1
 8000970:	71fb      	strb	r3, [r7, #7]
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	2b13      	cmp	r3, #19
 8000976:	d9ed      	bls.n	8000954 <Led_Display+0x10>
	}
	Latch_Enable();
 8000978:	f7ff ff7a 	bl	8000870 <Latch_Enable>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20000094 	.word	0x20000094

08000988 <Update_Led_Driver_Buffer>:
void Update_Led_Driver_Buffer(void){
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
	//Green_Cummulative_Backward(ledDriverBuffer, NUMBER_OF_LED);
	//Red_Forward_Green_Backward_Cumm(ledDriverBuffer, NUMBER_OF_LED);
	//Red_Backward_Green_Forward_Cumm(ledDriverBuffer, NUMBER_OF_LED);
	//All_Led_Cummulative_Forward(ledDriverBuffer, NUMBER_OF_LED);
	//All_Led_Cummulative_Backward(ledDriverBuffer, NUMBER_OF_LED);
	Half_Mixing_Alternative(ledDriverBuffer, NUMBER_OF_LED);
 800098c:	2114      	movs	r1, #20
 800098e:	4802      	ldr	r0, [pc, #8]	; (8000998 <Update_Led_Driver_Buffer+0x10>)
 8000990:	f7ff fe18 	bl	80005c4 <Half_Mixing_Alternative>
}
 8000994:	bf00      	nop
 8000996:	bd80      	pop	{r7, pc}
 8000998:	20000094 	.word	0x20000094

0800099c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	Timer_Run();
 80009a4:	f000 f81a 	bl	80009dc <Timer_Run>
}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b4:	b672      	cpsid	i
}
 80009b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b8:	e7fe      	b.n	80009b8 <Error_Handler+0x8>
	...

080009bc <Set_Timer>:
#include "software_timer.h"

int timerCounter 	= 0;
int timerFlag 		= 0;

void Set_Timer(void){
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
	timerCounter = TIMER_DELAY/TIMER_INTERRUPT;
 80009c0:	4b04      	ldr	r3, [pc, #16]	; (80009d4 <Set_Timer+0x18>)
 80009c2:	2205      	movs	r2, #5
 80009c4:	601a      	str	r2, [r3, #0]
	timerFlag 	 = 0;
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <Set_Timer+0x1c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bc80      	pop	{r7}
 80009d2:	4770      	bx	lr
 80009d4:	200000a8 	.word	0x200000a8
 80009d8:	200000ac 	.word	0x200000ac

080009dc <Timer_Run>:
void Timer_Run(void){
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
	if (timerCounter > 0){
 80009e0:	4b09      	ldr	r3, [pc, #36]	; (8000a08 <Timer_Run+0x2c>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	dd0b      	ble.n	8000a00 <Timer_Run+0x24>
		timerCounter--;
 80009e8:	4b07      	ldr	r3, [pc, #28]	; (8000a08 <Timer_Run+0x2c>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	4a06      	ldr	r2, [pc, #24]	; (8000a08 <Timer_Run+0x2c>)
 80009f0:	6013      	str	r3, [r2, #0]
		if (timerCounter <= 0){
 80009f2:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <Timer_Run+0x2c>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	dc02      	bgt.n	8000a00 <Timer_Run+0x24>
			timerFlag = 1;
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <Timer_Run+0x30>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	601a      	str	r2, [r3, #0]
		}
	}
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bc80      	pop	{r7}
 8000a06:	4770      	bx	lr
 8000a08:	200000a8 	.word	0x200000a8
 8000a0c:	200000ac 	.word	0x200000ac

08000a10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000a16:	4b0e      	ldr	r3, [pc, #56]	; (8000a50 <HAL_MspInit+0x40>)
 8000a18:	699b      	ldr	r3, [r3, #24]
 8000a1a:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <HAL_MspInit+0x40>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6193      	str	r3, [r2, #24]
 8000a22:	4b0b      	ldr	r3, [pc, #44]	; (8000a50 <HAL_MspInit+0x40>)
 8000a24:	699b      	ldr	r3, [r3, #24]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <HAL_MspInit+0x40>)
 8000a30:	69db      	ldr	r3, [r3, #28]
 8000a32:	4a07      	ldr	r2, [pc, #28]	; (8000a50 <HAL_MspInit+0x40>)
 8000a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a38:	61d3      	str	r3, [r2, #28]
 8000a3a:	4b05      	ldr	r3, [pc, #20]	; (8000a50 <HAL_MspInit+0x40>)
 8000a3c:	69db      	ldr	r3, [r3, #28]
 8000a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bc80      	pop	{r7}
 8000a4e:	4770      	bx	lr
 8000a50:	40021000 	.word	0x40021000

08000a54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <NMI_Handler+0x4>

08000a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <HardFault_Handler+0x4>

08000a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <MemManage_Handler+0x4>

08000a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a6a:	e7fe      	b.n	8000a6a <BusFault_Handler+0x4>

08000a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <UsageFault_Handler+0x4>

08000a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a72:	b480      	push	{r7}
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bc80      	pop	{r7}
 8000a7c:	4770      	bx	lr

08000a7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a7e:	b480      	push	{r7}
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a82:	bf00      	nop
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bc80      	pop	{r7}
 8000a88:	4770      	bx	lr

08000a8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bc80      	pop	{r7}
 8000a94:	4770      	bx	lr

08000a96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a9a:	f000 f925 	bl	8000ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
	...

08000aa4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000aa8:	4802      	ldr	r0, [pc, #8]	; (8000ab4 <TIM2_IRQHandler+0x10>)
 8000aaa:	f001 f86d 	bl	8001b88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	200000b4 	.word	0x200000b4

08000ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ac0:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <_sbrk+0x5c>)
 8000ac2:	4b15      	ldr	r3, [pc, #84]	; (8000b18 <_sbrk+0x60>)
 8000ac4:	1ad3      	subs	r3, r2, r3
 8000ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000acc:	4b13      	ldr	r3, [pc, #76]	; (8000b1c <_sbrk+0x64>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d102      	bne.n	8000ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ad4:	4b11      	ldr	r3, [pc, #68]	; (8000b1c <_sbrk+0x64>)
 8000ad6:	4a12      	ldr	r2, [pc, #72]	; (8000b20 <_sbrk+0x68>)
 8000ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ada:	4b10      	ldr	r3, [pc, #64]	; (8000b1c <_sbrk+0x64>)
 8000adc:	681a      	ldr	r2, [r3, #0]
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	693a      	ldr	r2, [r7, #16]
 8000ae4:	429a      	cmp	r2, r3
 8000ae6:	d207      	bcs.n	8000af8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ae8:	f001 fba6 	bl	8002238 <__errno>
 8000aec:	4603      	mov	r3, r0
 8000aee:	220c      	movs	r2, #12
 8000af0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000af2:	f04f 33ff 	mov.w	r3, #4294967295
 8000af6:	e009      	b.n	8000b0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000af8:	4b08      	ldr	r3, [pc, #32]	; (8000b1c <_sbrk+0x64>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000afe:	4b07      	ldr	r3, [pc, #28]	; (8000b1c <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <_sbrk+0x64>)
 8000b08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20005000 	.word	0x20005000
 8000b18:	00000400 	.word	0x00000400
 8000b1c:	200000b0 	.word	0x200000b0
 8000b20:	20000110 	.word	0x20000110

08000b24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc80      	pop	{r7}
 8000b2e:	4770      	bx	lr

08000b30 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b086      	sub	sp, #24
 8000b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b36:	f107 0308 	add.w	r3, r7, #8
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b4c:	4b1d      	ldr	r3, [pc, #116]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b4e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000b52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000b54:	4b1b      	ldr	r3, [pc, #108]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b56:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000b5a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b19      	ldr	r3, [pc, #100]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000b62:	4b18      	ldr	r3, [pc, #96]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b64:	2209      	movs	r2, #9
 8000b66:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b68:	4b16      	ldr	r3, [pc, #88]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b74:	4813      	ldr	r0, [pc, #76]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b76:	f000 ff65 	bl	8001a44 <HAL_TIM_Base_Init>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d001      	beq.n	8000b84 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000b80:	f7ff ff16 	bl	80009b0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b88:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000b8a:	f107 0308 	add.w	r3, r7, #8
 8000b8e:	4619      	mov	r1, r3
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000b92:	f001 f901 	bl	8001d98 <HAL_TIM_ConfigClockSource>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000b9c:	f7ff ff08 	bl	80009b0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_TIM2_Init+0x94>)
 8000bae:	f001 fad3 	bl	8002158 <HAL_TIMEx_MasterConfigSynchronization>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000bb8:	f7ff fefa 	bl	80009b0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000bbc:	bf00      	nop
 8000bbe:	3718      	adds	r7, #24
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	200000b4 	.word	0x200000b4

08000bc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b084      	sub	sp, #16
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd8:	d113      	bne.n	8000c02 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bda:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <HAL_TIM_Base_MspInit+0x44>)
 8000bdc:	69db      	ldr	r3, [r3, #28]
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <HAL_TIM_Base_MspInit+0x44>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	61d3      	str	r3, [r2, #28]
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <HAL_TIM_Base_MspInit+0x44>)
 8000be8:	69db      	ldr	r3, [r3, #28]
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	201c      	movs	r0, #28
 8000bf8:	f000 f969 	bl	8000ece <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bfc:	201c      	movs	r0, #28
 8000bfe:	f000 f982 	bl	8000f06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000c02:	bf00      	nop
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40021000 	.word	0x40021000

08000c10 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c10:	480c      	ldr	r0, [pc, #48]	; (8000c44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000c12:	490d      	ldr	r1, [pc, #52]	; (8000c48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000c14:	4a0d      	ldr	r2, [pc, #52]	; (8000c4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c18:	e002      	b.n	8000c20 <LoopCopyDataInit>

08000c1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c1e:	3304      	adds	r3, #4

08000c20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c24:	d3f9      	bcc.n	8000c1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c26:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c28:	4c0a      	ldr	r4, [pc, #40]	; (8000c54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c2c:	e001      	b.n	8000c32 <LoopFillZerobss>

08000c2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c30:	3204      	adds	r2, #4

08000c32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c34:	d3fb      	bcc.n	8000c2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c36:	f7ff ff75 	bl	8000b24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c3a:	f001 fb03 	bl	8002244 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff fdad 	bl	800079c <main>
  bx lr
 8000c42:	4770      	bx	lr
  ldr r0, =_sdata
 8000c44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c48:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c4c:	080024f0 	.word	0x080024f0
  ldr r2, =_sbss
 8000c50:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c54:	20000110 	.word	0x20000110

08000c58 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c58:	e7fe      	b.n	8000c58 <ADC1_2_IRQHandler>
	...

08000c5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c60:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <HAL_Init+0x28>)
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a07      	ldr	r2, [pc, #28]	; (8000c84 <HAL_Init+0x28>)
 8000c66:	f043 0310 	orr.w	r3, r3, #16
 8000c6a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c6c:	2003      	movs	r0, #3
 8000c6e:	f000 f923 	bl	8000eb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c72:	200f      	movs	r0, #15
 8000c74:	f000 f808 	bl	8000c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c78:	f7ff feca 	bl	8000a10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40022000 	.word	0x40022000

08000c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x54>)
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_InitTick+0x58>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4619      	mov	r1, r3
 8000c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f000 f93b 	bl	8000f22 <HAL_SYSTICK_Config>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e00e      	b.n	8000cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d80a      	bhi.n	8000cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc4:	f000 f903 	bl	8000ece <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc8:	4a06      	ldr	r2, [pc, #24]	; (8000ce4 <HAL_InitTick+0x5c>)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	e000      	b.n	8000cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3708      	adds	r7, #8
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000004 	.word	0x20000004
 8000ce0:	2000000c 	.word	0x2000000c
 8000ce4:	20000008 	.word	0x20000008

08000ce8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cec:	4b05      	ldr	r3, [pc, #20]	; (8000d04 <HAL_IncTick+0x1c>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	461a      	mov	r2, r3
 8000cf2:	4b05      	ldr	r3, [pc, #20]	; (8000d08 <HAL_IncTick+0x20>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	4a03      	ldr	r2, [pc, #12]	; (8000d08 <HAL_IncTick+0x20>)
 8000cfa:	6013      	str	r3, [r2, #0]
}
 8000cfc:	bf00      	nop
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bc80      	pop	{r7}
 8000d02:	4770      	bx	lr
 8000d04:	2000000c 	.word	0x2000000c
 8000d08:	200000fc 	.word	0x200000fc

08000d0c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b02      	ldr	r3, [pc, #8]	; (8000d1c <HAL_GetTick+0x10>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr
 8000d1c:	200000fc 	.word	0x200000fc

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	; (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bc80      	pop	{r7}
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	; (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	db0b      	blt.n	8000dae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d96:	79fb      	ldrb	r3, [r7, #7]
 8000d98:	f003 021f 	and.w	r2, r3, #31
 8000d9c:	4906      	ldr	r1, [pc, #24]	; (8000db8 <__NVIC_EnableIRQ+0x34>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	095b      	lsrs	r3, r3, #5
 8000da4:	2001      	movs	r0, #1
 8000da6:	fa00 f202 	lsl.w	r2, r0, r2
 8000daa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000dae:	bf00      	nop
 8000db0:	370c      	adds	r7, #12
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bc80      	pop	{r7}
 8000db6:	4770      	bx	lr
 8000db8:	e000e100 	.word	0xe000e100

08000dbc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	6039      	str	r1, [r7, #0]
 8000dc6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	db0a      	blt.n	8000de6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	b2da      	uxtb	r2, r3
 8000dd4:	490c      	ldr	r1, [pc, #48]	; (8000e08 <__NVIC_SetPriority+0x4c>)
 8000dd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dda:	0112      	lsls	r2, r2, #4
 8000ddc:	b2d2      	uxtb	r2, r2
 8000dde:	440b      	add	r3, r1
 8000de0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000de4:	e00a      	b.n	8000dfc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	b2da      	uxtb	r2, r3
 8000dea:	4908      	ldr	r1, [pc, #32]	; (8000e0c <__NVIC_SetPriority+0x50>)
 8000dec:	79fb      	ldrb	r3, [r7, #7]
 8000dee:	f003 030f 	and.w	r3, r3, #15
 8000df2:	3b04      	subs	r3, #4
 8000df4:	0112      	lsls	r2, r2, #4
 8000df6:	b2d2      	uxtb	r2, r2
 8000df8:	440b      	add	r3, r1
 8000dfa:	761a      	strb	r2, [r3, #24]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bc80      	pop	{r7}
 8000e04:	4770      	bx	lr
 8000e06:	bf00      	nop
 8000e08:	e000e100 	.word	0xe000e100
 8000e0c:	e000ed00 	.word	0xe000ed00

08000e10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b089      	sub	sp, #36	; 0x24
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	60f8      	str	r0, [r7, #12]
 8000e18:	60b9      	str	r1, [r7, #8]
 8000e1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f003 0307 	and.w	r3, r3, #7
 8000e22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f1c3 0307 	rsb	r3, r3, #7
 8000e2a:	2b04      	cmp	r3, #4
 8000e2c:	bf28      	it	cs
 8000e2e:	2304      	movcs	r3, #4
 8000e30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e32:	69fb      	ldr	r3, [r7, #28]
 8000e34:	3304      	adds	r3, #4
 8000e36:	2b06      	cmp	r3, #6
 8000e38:	d902      	bls.n	8000e40 <NVIC_EncodePriority+0x30>
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	3b03      	subs	r3, #3
 8000e3e:	e000      	b.n	8000e42 <NVIC_EncodePriority+0x32>
 8000e40:	2300      	movs	r3, #0
 8000e42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	f04f 32ff 	mov.w	r2, #4294967295
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	43da      	mvns	r2, r3
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	401a      	ands	r2, r3
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e58:	f04f 31ff 	mov.w	r1, #4294967295
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e62:	43d9      	mvns	r1, r3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e68:	4313      	orrs	r3, r2
         );
}
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	3724      	adds	r7, #36	; 0x24
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bc80      	pop	{r7}
 8000e72:	4770      	bx	lr

08000e74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e84:	d301      	bcc.n	8000e8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e86:	2301      	movs	r3, #1
 8000e88:	e00f      	b.n	8000eaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <SysTick_Config+0x40>)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3b01      	subs	r3, #1
 8000e90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e92:	210f      	movs	r1, #15
 8000e94:	f04f 30ff 	mov.w	r0, #4294967295
 8000e98:	f7ff ff90 	bl	8000dbc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e9c:	4b05      	ldr	r3, [pc, #20]	; (8000eb4 <SysTick_Config+0x40>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ea2:	4b04      	ldr	r3, [pc, #16]	; (8000eb4 <SysTick_Config+0x40>)
 8000ea4:	2207      	movs	r2, #7
 8000ea6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ea8:	2300      	movs	r3, #0
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3708      	adds	r7, #8
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	e000e010 	.word	0xe000e010

08000eb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec0:	6878      	ldr	r0, [r7, #4]
 8000ec2:	f7ff ff2d 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ece:	b580      	push	{r7, lr}
 8000ed0:	b086      	sub	sp, #24
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	4603      	mov	r3, r0
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	607a      	str	r2, [r7, #4]
 8000eda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee0:	f7ff ff42 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000ee4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	68b9      	ldr	r1, [r7, #8]
 8000eea:	6978      	ldr	r0, [r7, #20]
 8000eec:	f7ff ff90 	bl	8000e10 <NVIC_EncodePriority>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef6:	4611      	mov	r1, r2
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ff5f 	bl	8000dbc <__NVIC_SetPriority>
}
 8000efe:	bf00      	nop
 8000f00:	3718      	adds	r7, #24
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}

08000f06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f06:	b580      	push	{r7, lr}
 8000f08:	b082      	sub	sp, #8
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff ff35 	bl	8000d84 <__NVIC_EnableIRQ>
}
 8000f1a:	bf00      	nop
 8000f1c:	3708      	adds	r7, #8
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	6878      	ldr	r0, [r7, #4]
 8000f2c:	f7ff ffa2 	bl	8000e74 <SysTick_Config>
 8000f30:	4603      	mov	r3, r0
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
	...

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b08b      	sub	sp, #44	; 0x2c
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4e:	e169      	b.n	8001224 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f50:	2201      	movs	r2, #1
 8000f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f54:	fa02 f303 	lsl.w	r3, r2, r3
 8000f58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	69fa      	ldr	r2, [r7, #28]
 8000f60:	4013      	ands	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	f040 8158 	bne.w	800121e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	4a9a      	ldr	r2, [pc, #616]	; (80011dc <HAL_GPIO_Init+0x2a0>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d05e      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f78:	4a98      	ldr	r2, [pc, #608]	; (80011dc <HAL_GPIO_Init+0x2a0>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d875      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f7e:	4a98      	ldr	r2, [pc, #608]	; (80011e0 <HAL_GPIO_Init+0x2a4>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d058      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f84:	4a96      	ldr	r2, [pc, #600]	; (80011e0 <HAL_GPIO_Init+0x2a4>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d86f      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f8a:	4a96      	ldr	r2, [pc, #600]	; (80011e4 <HAL_GPIO_Init+0x2a8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d052      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f90:	4a94      	ldr	r2, [pc, #592]	; (80011e4 <HAL_GPIO_Init+0x2a8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d869      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000f96:	4a94      	ldr	r2, [pc, #592]	; (80011e8 <HAL_GPIO_Init+0x2ac>)
 8000f98:	4293      	cmp	r3, r2
 8000f9a:	d04c      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000f9c:	4a92      	ldr	r2, [pc, #584]	; (80011e8 <HAL_GPIO_Init+0x2ac>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d863      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fa2:	4a92      	ldr	r2, [pc, #584]	; (80011ec <HAL_GPIO_Init+0x2b0>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d046      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
 8000fa8:	4a90      	ldr	r2, [pc, #576]	; (80011ec <HAL_GPIO_Init+0x2b0>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d85d      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fae:	2b12      	cmp	r3, #18
 8000fb0:	d82a      	bhi.n	8001008 <HAL_GPIO_Init+0xcc>
 8000fb2:	2b12      	cmp	r3, #18
 8000fb4:	d859      	bhi.n	800106a <HAL_GPIO_Init+0x12e>
 8000fb6:	a201      	add	r2, pc, #4	; (adr r2, 8000fbc <HAL_GPIO_Init+0x80>)
 8000fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fbc:	08001037 	.word	0x08001037
 8000fc0:	08001011 	.word	0x08001011
 8000fc4:	08001023 	.word	0x08001023
 8000fc8:	08001065 	.word	0x08001065
 8000fcc:	0800106b 	.word	0x0800106b
 8000fd0:	0800106b 	.word	0x0800106b
 8000fd4:	0800106b 	.word	0x0800106b
 8000fd8:	0800106b 	.word	0x0800106b
 8000fdc:	0800106b 	.word	0x0800106b
 8000fe0:	0800106b 	.word	0x0800106b
 8000fe4:	0800106b 	.word	0x0800106b
 8000fe8:	0800106b 	.word	0x0800106b
 8000fec:	0800106b 	.word	0x0800106b
 8000ff0:	0800106b 	.word	0x0800106b
 8000ff4:	0800106b 	.word	0x0800106b
 8000ff8:	0800106b 	.word	0x0800106b
 8000ffc:	0800106b 	.word	0x0800106b
 8001000:	08001019 	.word	0x08001019
 8001004:	0800102d 	.word	0x0800102d
 8001008:	4a79      	ldr	r2, [pc, #484]	; (80011f0 <HAL_GPIO_Init+0x2b4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d013      	beq.n	8001036 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800100e:	e02c      	b.n	800106a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	623b      	str	r3, [r7, #32]
          break;
 8001016:	e029      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	3304      	adds	r3, #4
 800101e:	623b      	str	r3, [r7, #32]
          break;
 8001020:	e024      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	3308      	adds	r3, #8
 8001028:	623b      	str	r3, [r7, #32]
          break;
 800102a:	e01f      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	68db      	ldr	r3, [r3, #12]
 8001030:	330c      	adds	r3, #12
 8001032:	623b      	str	r3, [r7, #32]
          break;
 8001034:	e01a      	b.n	800106c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d102      	bne.n	8001044 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800103e:	2304      	movs	r3, #4
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e013      	b.n	800106c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	2b01      	cmp	r3, #1
 800104a:	d105      	bne.n	8001058 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800104c:	2308      	movs	r3, #8
 800104e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	69fa      	ldr	r2, [r7, #28]
 8001054:	611a      	str	r2, [r3, #16]
          break;
 8001056:	e009      	b.n	800106c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001058:	2308      	movs	r3, #8
 800105a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	69fa      	ldr	r2, [r7, #28]
 8001060:	615a      	str	r2, [r3, #20]
          break;
 8001062:	e003      	b.n	800106c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
          break;
 8001068:	e000      	b.n	800106c <HAL_GPIO_Init+0x130>
          break;
 800106a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	2bff      	cmp	r3, #255	; 0xff
 8001070:	d801      	bhi.n	8001076 <HAL_GPIO_Init+0x13a>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	e001      	b.n	800107a <HAL_GPIO_Init+0x13e>
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	3304      	adds	r3, #4
 800107a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	2bff      	cmp	r3, #255	; 0xff
 8001080:	d802      	bhi.n	8001088 <HAL_GPIO_Init+0x14c>
 8001082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x152>
 8001088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800108a:	3b08      	subs	r3, #8
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	681a      	ldr	r2, [r3, #0]
 8001094:	210f      	movs	r1, #15
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	fa01 f303 	lsl.w	r3, r1, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	401a      	ands	r2, r3
 80010a0:	6a39      	ldr	r1, [r7, #32]
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	fa01 f303 	lsl.w	r3, r1, r3
 80010a8:	431a      	orrs	r2, r3
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010ae:	683b      	ldr	r3, [r7, #0]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 80b1 	beq.w	800121e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010bc:	4b4d      	ldr	r3, [pc, #308]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	4a4c      	ldr	r2, [pc, #304]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6193      	str	r3, [r2, #24]
 80010c8:	4b4a      	ldr	r3, [pc, #296]	; (80011f4 <HAL_GPIO_Init+0x2b8>)
 80010ca:	699b      	ldr	r3, [r3, #24]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60bb      	str	r3, [r7, #8]
 80010d2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80010d4:	4a48      	ldr	r2, [pc, #288]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	3302      	adds	r3, #2
 80010dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010e0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80010e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e4:	f003 0303 	and.w	r3, r3, #3
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	220f      	movs	r2, #15
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	43db      	mvns	r3, r3
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	4013      	ands	r3, r2
 80010f6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4a40      	ldr	r2, [pc, #256]	; (80011fc <HAL_GPIO_Init+0x2c0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d013      	beq.n	8001128 <HAL_GPIO_Init+0x1ec>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	4a3f      	ldr	r2, [pc, #252]	; (8001200 <HAL_GPIO_Init+0x2c4>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d00d      	beq.n	8001124 <HAL_GPIO_Init+0x1e8>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4a3e      	ldr	r2, [pc, #248]	; (8001204 <HAL_GPIO_Init+0x2c8>)
 800110c:	4293      	cmp	r3, r2
 800110e:	d007      	beq.n	8001120 <HAL_GPIO_Init+0x1e4>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	4a3d      	ldr	r2, [pc, #244]	; (8001208 <HAL_GPIO_Init+0x2cc>)
 8001114:	4293      	cmp	r3, r2
 8001116:	d101      	bne.n	800111c <HAL_GPIO_Init+0x1e0>
 8001118:	2303      	movs	r3, #3
 800111a:	e006      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 800111c:	2304      	movs	r3, #4
 800111e:	e004      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001120:	2302      	movs	r3, #2
 8001122:	e002      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001124:	2301      	movs	r3, #1
 8001126:	e000      	b.n	800112a <HAL_GPIO_Init+0x1ee>
 8001128:	2300      	movs	r3, #0
 800112a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800112c:	f002 0203 	and.w	r2, r2, #3
 8001130:	0092      	lsls	r2, r2, #2
 8001132:	4093      	lsls	r3, r2
 8001134:	68fa      	ldr	r2, [r7, #12]
 8001136:	4313      	orrs	r3, r2
 8001138:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800113a:	492f      	ldr	r1, [pc, #188]	; (80011f8 <HAL_GPIO_Init+0x2bc>)
 800113c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800113e:	089b      	lsrs	r3, r3, #2
 8001140:	3302      	adds	r3, #2
 8001142:	68fa      	ldr	r2, [r7, #12]
 8001144:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	2b00      	cmp	r3, #0
 8001152:	d006      	beq.n	8001162 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001154:	4b2d      	ldr	r3, [pc, #180]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	492c      	ldr	r1, [pc, #176]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800115a:	69bb      	ldr	r3, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	600b      	str	r3, [r1, #0]
 8001160:	e006      	b.n	8001170 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001162:	4b2a      	ldr	r3, [pc, #168]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	69bb      	ldr	r3, [r7, #24]
 8001168:	43db      	mvns	r3, r3
 800116a:	4928      	ldr	r1, [pc, #160]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800116c:	4013      	ands	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001178:	2b00      	cmp	r3, #0
 800117a:	d006      	beq.n	800118a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800117c:	4b23      	ldr	r3, [pc, #140]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800117e:	685a      	ldr	r2, [r3, #4]
 8001180:	4922      	ldr	r1, [pc, #136]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
 8001188:	e006      	b.n	8001198 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800118a:	4b20      	ldr	r3, [pc, #128]	; (800120c <HAL_GPIO_Init+0x2d0>)
 800118c:	685a      	ldr	r2, [r3, #4]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	43db      	mvns	r3, r3
 8001192:	491e      	ldr	r1, [pc, #120]	; (800120c <HAL_GPIO_Init+0x2d0>)
 8001194:	4013      	ands	r3, r2
 8001196:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d006      	beq.n	80011b2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011a4:	4b19      	ldr	r3, [pc, #100]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011a6:	689a      	ldr	r2, [r3, #8]
 80011a8:	4918      	ldr	r1, [pc, #96]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011aa:	69bb      	ldr	r3, [r7, #24]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
 80011b0:	e006      	b.n	80011c0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	69bb      	ldr	r3, [r7, #24]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	4914      	ldr	r1, [pc, #80]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011bc:	4013      	ands	r3, r2
 80011be:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d021      	beq.n	8001210 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011ce:	68da      	ldr	r2, [r3, #12]
 80011d0:	490e      	ldr	r1, [pc, #56]	; (800120c <HAL_GPIO_Init+0x2d0>)
 80011d2:	69bb      	ldr	r3, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	60cb      	str	r3, [r1, #12]
 80011d8:	e021      	b.n	800121e <HAL_GPIO_Init+0x2e2>
 80011da:	bf00      	nop
 80011dc:	10320000 	.word	0x10320000
 80011e0:	10310000 	.word	0x10310000
 80011e4:	10220000 	.word	0x10220000
 80011e8:	10210000 	.word	0x10210000
 80011ec:	10120000 	.word	0x10120000
 80011f0:	10110000 	.word	0x10110000
 80011f4:	40021000 	.word	0x40021000
 80011f8:	40010000 	.word	0x40010000
 80011fc:	40010800 	.word	0x40010800
 8001200:	40010c00 	.word	0x40010c00
 8001204:	40011000 	.word	0x40011000
 8001208:	40011400 	.word	0x40011400
 800120c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <HAL_GPIO_Init+0x304>)
 8001212:	68da      	ldr	r2, [r3, #12]
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	43db      	mvns	r3, r3
 8001218:	4909      	ldr	r1, [pc, #36]	; (8001240 <HAL_GPIO_Init+0x304>)
 800121a:	4013      	ands	r3, r2
 800121c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800121e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001220:	3301      	adds	r3, #1
 8001222:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001224:	683b      	ldr	r3, [r7, #0]
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	f47f ae8e 	bne.w	8000f50 <HAL_GPIO_Init+0x14>
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	372c      	adds	r7, #44	; 0x2c
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr
 8001240:	40010400 	.word	0x40010400

08001244 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
 800124c:	460b      	mov	r3, r1
 800124e:	807b      	strh	r3, [r7, #2]
 8001250:	4613      	mov	r3, r2
 8001252:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001254:	787b      	ldrb	r3, [r7, #1]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800125a:	887a      	ldrh	r2, [r7, #2]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001260:	e003      	b.n	800126a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001262:	887b      	ldrh	r3, [r7, #2]
 8001264:	041a      	lsls	r2, r3, #16
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	611a      	str	r2, [r3, #16]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	bc80      	pop	{r7}
 8001272:	4770      	bx	lr

08001274 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e272      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8087 	beq.w	80013a2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001294:	4b92      	ldr	r3, [pc, #584]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b04      	cmp	r3, #4
 800129e:	d00c      	beq.n	80012ba <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a0:	4b8f      	ldr	r3, [pc, #572]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d112      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
 80012ac:	4b8c      	ldr	r3, [pc, #560]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d10b      	bne.n	80012d2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ba:	4b89      	ldr	r3, [pc, #548]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d06c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x12c>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d168      	bne.n	80013a0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e24c      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x76>
 80012dc:	4b80      	ldr	r3, [pc, #512]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a7f      	ldr	r2, [pc, #508]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e02e      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x98>
 80012f2:	4b7b      	ldr	r3, [pc, #492]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7a      	ldr	r2, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80012f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b78      	ldr	r3, [pc, #480]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a77      	ldr	r2, [pc, #476]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0xbc>
 8001316:	4b72      	ldr	r3, [pc, #456]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a71      	ldr	r2, [pc, #452]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a6e      	ldr	r2, [pc, #440]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xd4>
 8001330:	4b6b      	ldr	r3, [pc, #428]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6a      	ldr	r2, [pc, #424]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a67      	ldr	r2, [pc, #412]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001350:	f7ff fcdc 	bl	8000d0c <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001358:	f7ff fcd8 	bl	8000d0c <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e200      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136a:	4b5d      	ldr	r3, [pc, #372]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xe4>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001378:	f7ff fcc8 	bl	8000d0c <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001380:	f7ff fcc4 	bl	8000d0c <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e1ec      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001392:	4b53      	ldr	r3, [pc, #332]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x10c>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d063      	beq.n	8001476 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ae:	4b4c      	ldr	r3, [pc, #304]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
 80013c6:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013d2:	4b43      	ldr	r3, [pc, #268]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1c0      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	4939      	ldr	r1, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	e03a      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d020      	beq.n	800144a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001408:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <HAL_RCC_OscConfig+0x270>)
 800140a:	2201      	movs	r2, #1
 800140c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800140e:	f7ff fc7d 	bl	8000d0c <HAL_GetTick>
 8001412:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001414:	e008      	b.n	8001428 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001416:	f7ff fc79 	bl	8000d0c <HAL_GetTick>
 800141a:	4602      	mov	r2, r0
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	1ad3      	subs	r3, r2, r3
 8001420:	2b02      	cmp	r3, #2
 8001422:	d901      	bls.n	8001428 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001424:	2303      	movs	r3, #3
 8001426:	e1a1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001428:	4b2d      	ldr	r3, [pc, #180]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f003 0302 	and.w	r3, r3, #2
 8001430:	2b00      	cmp	r3, #0
 8001432:	d0f0      	beq.n	8001416 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001434:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	695b      	ldr	r3, [r3, #20]
 8001440:	00db      	lsls	r3, r3, #3
 8001442:	4927      	ldr	r1, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
 8001448:	e015      	b.n	8001476 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800144a:	4b26      	ldr	r3, [pc, #152]	; (80014e4 <HAL_RCC_OscConfig+0x270>)
 800144c:	2200      	movs	r2, #0
 800144e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001450:	f7ff fc5c 	bl	8000d0c <HAL_GetTick>
 8001454:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001456:	e008      	b.n	800146a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001458:	f7ff fc58 	bl	8000d0c <HAL_GetTick>
 800145c:	4602      	mov	r2, r0
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	2b02      	cmp	r3, #2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e180      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800146a:	4b1d      	ldr	r3, [pc, #116]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f003 0302 	and.w	r3, r3, #2
 8001472:	2b00      	cmp	r3, #0
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0308 	and.w	r3, r3, #8
 800147e:	2b00      	cmp	r3, #0
 8001480:	d03a      	beq.n	80014f8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	699b      	ldr	r3, [r3, #24]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d019      	beq.n	80014be <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800148a:	4b17      	ldr	r3, [pc, #92]	; (80014e8 <HAL_RCC_OscConfig+0x274>)
 800148c:	2201      	movs	r2, #1
 800148e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001490:	f7ff fc3c 	bl	8000d0c <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001498:	f7ff fc38 	bl	8000d0c <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e160      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <HAL_RCC_OscConfig+0x26c>)
 80014ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ae:	f003 0302 	and.w	r3, r3, #2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014b6:	2001      	movs	r0, #1
 80014b8:	f000 faa6 	bl	8001a08 <RCC_Delay>
 80014bc:	e01c      	b.n	80014f8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_RCC_OscConfig+0x274>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff fc22 	bl	8000d0c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ca:	e00f      	b.n	80014ec <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014cc:	f7ff fc1e 	bl	8000d0c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b02      	cmp	r3, #2
 80014d8:	d908      	bls.n	80014ec <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e146      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000
 80014e4:	42420000 	.word	0x42420000
 80014e8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014ec:	4b92      	ldr	r3, [pc, #584]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	f003 0302 	and.w	r3, r3, #2
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d1e9      	bne.n	80014cc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f003 0304 	and.w	r3, r3, #4
 8001500:	2b00      	cmp	r3, #0
 8001502:	f000 80a6 	beq.w	8001652 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001506:	2300      	movs	r3, #0
 8001508:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800150a:	4b8b      	ldr	r3, [pc, #556]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d10d      	bne.n	8001532 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001516:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a87      	ldr	r2, [pc, #540]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800151c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b85      	ldr	r3, [pc, #532]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800152e:	2301      	movs	r3, #1
 8001530:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001532:	4b82      	ldr	r3, [pc, #520]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153a:	2b00      	cmp	r3, #0
 800153c:	d118      	bne.n	8001570 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800153e:	4b7f      	ldr	r3, [pc, #508]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a7e      	ldr	r2, [pc, #504]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001544:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001548:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800154a:	f7ff fbdf 	bl	8000d0c <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001550:	e008      	b.n	8001564 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001552:	f7ff fbdb 	bl	8000d0c <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	; 0x64
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e103      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001564:	4b75      	ldr	r3, [pc, #468]	; (800173c <HAL_RCC_OscConfig+0x4c8>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0f0      	beq.n	8001552 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d106      	bne.n	8001586 <HAL_RCC_OscConfig+0x312>
 8001578:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	4a6e      	ldr	r2, [pc, #440]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6213      	str	r3, [r2, #32]
 8001584:	e02d      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d10c      	bne.n	80015a8 <HAL_RCC_OscConfig+0x334>
 800158e:	4b6a      	ldr	r3, [pc, #424]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001590:	6a1b      	ldr	r3, [r3, #32]
 8001592:	4a69      	ldr	r2, [pc, #420]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001594:	f023 0301 	bic.w	r3, r3, #1
 8001598:	6213      	str	r3, [r2, #32]
 800159a:	4b67      	ldr	r3, [pc, #412]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	6a1b      	ldr	r3, [r3, #32]
 800159e:	4a66      	ldr	r2, [pc, #408]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015a0:	f023 0304 	bic.w	r3, r3, #4
 80015a4:	6213      	str	r3, [r2, #32]
 80015a6:	e01c      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d10c      	bne.n	80015ca <HAL_RCC_OscConfig+0x356>
 80015b0:	4b61      	ldr	r3, [pc, #388]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b2:	6a1b      	ldr	r3, [r3, #32]
 80015b4:	4a60      	ldr	r2, [pc, #384]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015b6:	f043 0304 	orr.w	r3, r3, #4
 80015ba:	6213      	str	r3, [r2, #32]
 80015bc:	4b5e      	ldr	r3, [pc, #376]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015be:	6a1b      	ldr	r3, [r3, #32]
 80015c0:	4a5d      	ldr	r2, [pc, #372]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015c2:	f043 0301 	orr.w	r3, r3, #1
 80015c6:	6213      	str	r3, [r2, #32]
 80015c8:	e00b      	b.n	80015e2 <HAL_RCC_OscConfig+0x36e>
 80015ca:	4b5b      	ldr	r3, [pc, #364]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4a5a      	ldr	r2, [pc, #360]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d0:	f023 0301 	bic.w	r3, r3, #1
 80015d4:	6213      	str	r3, [r2, #32]
 80015d6:	4b58      	ldr	r3, [pc, #352]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015d8:	6a1b      	ldr	r3, [r3, #32]
 80015da:	4a57      	ldr	r2, [pc, #348]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80015dc:	f023 0304 	bic.w	r3, r3, #4
 80015e0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d015      	beq.n	8001616 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015ea:	f7ff fb8f 	bl	8000d0c <HAL_GetTick>
 80015ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015f0:	e00a      	b.n	8001608 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f2:	f7ff fb8b 	bl	8000d0c <HAL_GetTick>
 80015f6:	4602      	mov	r2, r0
 80015f8:	693b      	ldr	r3, [r7, #16]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001600:	4293      	cmp	r3, r2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e0b1      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0ee      	beq.n	80015f2 <HAL_RCC_OscConfig+0x37e>
 8001614:	e014      	b.n	8001640 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fb79 	bl	8000d0c <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fb75 	bl	8000d0c <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e09b      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001634:	4b40      	ldr	r3, [pc, #256]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d1ee      	bne.n	800161e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001640:	7dfb      	ldrb	r3, [r7, #23]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d105      	bne.n	8001652 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001646:	4b3c      	ldr	r3, [pc, #240]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001648:	69db      	ldr	r3, [r3, #28]
 800164a:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001650:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	69db      	ldr	r3, [r3, #28]
 8001656:	2b00      	cmp	r3, #0
 8001658:	f000 8087 	beq.w	800176a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800165c:	4b36      	ldr	r3, [pc, #216]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 030c 	and.w	r3, r3, #12
 8001664:	2b08      	cmp	r3, #8
 8001666:	d061      	beq.n	800172c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	69db      	ldr	r3, [r3, #28]
 800166c:	2b02      	cmp	r3, #2
 800166e:	d146      	bne.n	80016fe <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001670:	4b33      	ldr	r3, [pc, #204]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001672:	2200      	movs	r2, #0
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fb49 	bl	8000d0c <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167e:	f7ff fb45 	bl	8000d0c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e06d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001690:	4b29      	ldr	r3, [pc, #164]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001698:	2b00      	cmp	r3, #0
 800169a:	d1f0      	bne.n	800167e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a1b      	ldr	r3, [r3, #32]
 80016a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016a4:	d108      	bne.n	80016b8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016a6:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	689b      	ldr	r3, [r3, #8]
 80016b2:	4921      	ldr	r1, [pc, #132]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	4313      	orrs	r3, r2
 80016b6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016b8:	4b1f      	ldr	r3, [pc, #124]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a19      	ldr	r1, [r3, #32]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c8:	430b      	orrs	r3, r1
 80016ca:	491b      	ldr	r1, [pc, #108]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	4313      	orrs	r3, r2
 80016ce:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016d0:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 80016d2:	2201      	movs	r2, #1
 80016d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d6:	f7ff fb19 	bl	8000d0c <HAL_GetTick>
 80016da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016dc:	e008      	b.n	80016f0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016de:	f7ff fb15 	bl	8000d0c <HAL_GetTick>
 80016e2:	4602      	mov	r2, r0
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	1ad3      	subs	r3, r2, r3
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e03d      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f0:	4b11      	ldr	r3, [pc, #68]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d0f0      	beq.n	80016de <HAL_RCC_OscConfig+0x46a>
 80016fc:	e035      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x4cc>)
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fb02 	bl	8000d0c <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff fafe 	bl	8000d0c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e026      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4b06      	ldr	r3, [pc, #24]	; (8001738 <HAL_RCC_OscConfig+0x4c4>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x498>
 800172a:	e01e      	b.n	800176a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69db      	ldr	r3, [r3, #28]
 8001730:	2b01      	cmp	r3, #1
 8001732:	d107      	bne.n	8001744 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e019      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000
 8001740:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001744:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <HAL_RCC_OscConfig+0x500>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6a1b      	ldr	r3, [r3, #32]
 8001754:	429a      	cmp	r2, r3
 8001756:	d106      	bne.n	8001766 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001762:	429a      	cmp	r2, r3
 8001764:	d001      	beq.n	800176a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800176a:	2300      	movs	r3, #0
}
 800176c:	4618      	mov	r0, r3
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40021000 	.word	0x40021000

08001778 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d101      	bne.n	800178c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	e0d0      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800178c:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 0307 	and.w	r3, r3, #7
 8001794:	683a      	ldr	r2, [r7, #0]
 8001796:	429a      	cmp	r2, r3
 8001798:	d910      	bls.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800179a:	4b67      	ldr	r3, [pc, #412]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	f023 0207 	bic.w	r2, r3, #7
 80017a2:	4965      	ldr	r1, [pc, #404]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	4313      	orrs	r3, r2
 80017a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0307 	and.w	r3, r3, #7
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0b8      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0302 	and.w	r3, r3, #2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d020      	beq.n	800180a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80017d4:	4b59      	ldr	r3, [pc, #356]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	4a58      	ldr	r2, [pc, #352]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017da:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80017de:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017ec:	4b53      	ldr	r3, [pc, #332]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	4a52      	ldr	r2, [pc, #328]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017f2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80017f6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	494d      	ldr	r1, [pc, #308]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	4313      	orrs	r3, r2
 8001808:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f003 0301 	and.w	r3, r3, #1
 8001812:	2b00      	cmp	r3, #0
 8001814:	d040      	beq.n	8001898 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	2b01      	cmp	r3, #1
 800181c:	d107      	bne.n	800182e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d115      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e07f      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b02      	cmp	r3, #2
 8001834:	d107      	bne.n	8001846 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001836:	4b41      	ldr	r3, [pc, #260]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d109      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e073      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d101      	bne.n	8001856 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e06b      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001856:	4b39      	ldr	r3, [pc, #228]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f023 0203 	bic.w	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4936      	ldr	r1, [pc, #216]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	4313      	orrs	r3, r2
 8001866:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001868:	f7ff fa50 	bl	8000d0c <HAL_GetTick>
 800186c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800186e:	e00a      	b.n	8001886 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001870:	f7ff fa4c 	bl	8000d0c <HAL_GetTick>
 8001874:	4602      	mov	r2, r0
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	f241 3288 	movw	r2, #5000	; 0x1388
 800187e:	4293      	cmp	r3, r2
 8001880:	d901      	bls.n	8001886 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001882:	2303      	movs	r3, #3
 8001884:	e053      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001886:	4b2d      	ldr	r3, [pc, #180]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	f003 020c 	and.w	r2, r3, #12
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	429a      	cmp	r2, r3
 8001896:	d1eb      	bne.n	8001870 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001898:	4b27      	ldr	r3, [pc, #156]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f003 0307 	and.w	r3, r3, #7
 80018a0:	683a      	ldr	r2, [r7, #0]
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d210      	bcs.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f023 0207 	bic.w	r2, r3, #7
 80018ae:	4922      	ldr	r1, [pc, #136]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_RCC_ClockConfig+0x1c0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0307 	and.w	r3, r3, #7
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d001      	beq.n	80018c8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e032      	b.n	800192e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f003 0304 	and.w	r3, r3, #4
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d008      	beq.n	80018e6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	4916      	ldr	r1, [pc, #88]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0308 	and.w	r3, r3, #8
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d009      	beq.n	8001906 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018f2:	4b12      	ldr	r3, [pc, #72]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	691b      	ldr	r3, [r3, #16]
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	490e      	ldr	r1, [pc, #56]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	4313      	orrs	r3, r2
 8001904:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001906:	f000 f821 	bl	800194c <HAL_RCC_GetSysClockFreq>
 800190a:	4602      	mov	r2, r0
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	685b      	ldr	r3, [r3, #4]
 8001910:	091b      	lsrs	r3, r3, #4
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	490a      	ldr	r1, [pc, #40]	; (8001940 <HAL_RCC_ClockConfig+0x1c8>)
 8001918:	5ccb      	ldrb	r3, [r1, r3]
 800191a:	fa22 f303 	lsr.w	r3, r2, r3
 800191e:	4a09      	ldr	r2, [pc, #36]	; (8001944 <HAL_RCC_ClockConfig+0x1cc>)
 8001920:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001922:	4b09      	ldr	r3, [pc, #36]	; (8001948 <HAL_RCC_ClockConfig+0x1d0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff f9ae 	bl	8000c88 <HAL_InitTick>

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3710      	adds	r7, #16
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40022000 	.word	0x40022000
 800193c:	40021000 	.word	0x40021000
 8001940:	080024d8 	.word	0x080024d8
 8001944:	20000004 	.word	0x20000004
 8001948:	20000008 	.word	0x20000008

0800194c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800194c:	b490      	push	{r4, r7}
 800194e:	b08a      	sub	sp, #40	; 0x28
 8001950:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001952:	4b29      	ldr	r3, [pc, #164]	; (80019f8 <HAL_RCC_GetSysClockFreq+0xac>)
 8001954:	1d3c      	adds	r4, r7, #4
 8001956:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001958:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800195c:	f240 2301 	movw	r3, #513	; 0x201
 8001960:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	2300      	movs	r3, #0
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001976:	4b21      	ldr	r3, [pc, #132]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	f003 030c 	and.w	r3, r3, #12
 8001982:	2b04      	cmp	r3, #4
 8001984:	d002      	beq.n	800198c <HAL_RCC_GetSysClockFreq+0x40>
 8001986:	2b08      	cmp	r3, #8
 8001988:	d003      	beq.n	8001992 <HAL_RCC_GetSysClockFreq+0x46>
 800198a:	e02b      	b.n	80019e4 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800198c:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xb4>)
 800198e:	623b      	str	r3, [r7, #32]
      break;
 8001990:	e02b      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001992:	69fb      	ldr	r3, [r7, #28]
 8001994:	0c9b      	lsrs	r3, r3, #18
 8001996:	f003 030f 	and.w	r3, r3, #15
 800199a:	3328      	adds	r3, #40	; 0x28
 800199c:	443b      	add	r3, r7
 800199e:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019a2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d012      	beq.n	80019d4 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019ae:	4b13      	ldr	r3, [pc, #76]	; (80019fc <HAL_RCC_GetSysClockFreq+0xb0>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	0c5b      	lsrs	r3, r3, #17
 80019b4:	f003 0301 	and.w	r3, r3, #1
 80019b8:	3328      	adds	r3, #40	; 0x28
 80019ba:	443b      	add	r3, r7
 80019bc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019c0:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	4a0e      	ldr	r2, [pc, #56]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019c6:	fb03 f202 	mul.w	r2, r3, r2
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
 80019d2:	e004      	b.n	80019de <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	4a0b      	ldr	r2, [pc, #44]	; (8001a04 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019d8:	fb02 f303 	mul.w	r3, r2, r3
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e0:	623b      	str	r3, [r7, #32]
      break;
 80019e2:	e002      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019e4:	4b06      	ldr	r3, [pc, #24]	; (8001a00 <HAL_RCC_GetSysClockFreq+0xb4>)
 80019e6:	623b      	str	r3, [r7, #32]
      break;
 80019e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ea:	6a3b      	ldr	r3, [r7, #32]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bc90      	pop	{r4, r7}
 80019f4:	4770      	bx	lr
 80019f6:	bf00      	nop
 80019f8:	080024c8 	.word	0x080024c8
 80019fc:	40021000 	.word	0x40021000
 8001a00:	007a1200 	.word	0x007a1200
 8001a04:	003d0900 	.word	0x003d0900

08001a08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a10:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <RCC_Delay+0x34>)
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a0a      	ldr	r2, [pc, #40]	; (8001a40 <RCC_Delay+0x38>)
 8001a16:	fba2 2303 	umull	r2, r3, r2, r3
 8001a1a:	0a5b      	lsrs	r3, r3, #9
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001a24:	bf00      	nop
  }
  while (Delay --);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	1e5a      	subs	r2, r3, #1
 8001a2a:	60fa      	str	r2, [r7, #12]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1f9      	bne.n	8001a24 <RCC_Delay+0x1c>
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	3714      	adds	r7, #20
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	20000004 	.word	0x20000004
 8001a40:	10624dd3 	.word	0x10624dd3

08001a44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b082      	sub	sp, #8
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d101      	bne.n	8001a56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e041      	b.n	8001ada <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a5c:	b2db      	uxtb	r3, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d106      	bne.n	8001a70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001a6a:	6878      	ldr	r0, [r7, #4]
 8001a6c:	f7ff f8ac 	bl	8000bc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2202      	movs	r2, #2
 8001a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681a      	ldr	r2, [r3, #0]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	4619      	mov	r1, r3
 8001a82:	4610      	mov	r0, r2
 8001a84:	f000 fa70 	bl	8001f68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2201      	movs	r2, #1
 8001a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2201      	movs	r2, #1
 8001aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2201      	movs	r2, #1
 8001abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d001      	beq.n	8001afc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e03a      	b.n	8001b72 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2202      	movs	r2, #2
 8001b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	68da      	ldr	r2, [r3, #12]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	4a18      	ldr	r2, [pc, #96]	; (8001b7c <HAL_TIM_Base_Start_IT+0x98>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d00e      	beq.n	8001b3c <HAL_TIM_Base_Start_IT+0x58>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b26:	d009      	beq.n	8001b3c <HAL_TIM_Base_Start_IT+0x58>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a14      	ldr	r2, [pc, #80]	; (8001b80 <HAL_TIM_Base_Start_IT+0x9c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d004      	beq.n	8001b3c <HAL_TIM_Base_Start_IT+0x58>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a13      	ldr	r2, [pc, #76]	; (8001b84 <HAL_TIM_Base_Start_IT+0xa0>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d111      	bne.n	8001b60 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 0307 	and.w	r3, r3, #7
 8001b46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d010      	beq.n	8001b70 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f042 0201 	orr.w	r2, r2, #1
 8001b5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001b5e:	e007      	b.n	8001b70 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f042 0201 	orr.w	r2, r2, #1
 8001b6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	40012c00 	.word	0x40012c00
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40000800 	.word	0x40000800

08001b88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d122      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	f003 0302 	and.w	r3, r3, #2
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d11b      	bne.n	8001be4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f06f 0202 	mvn.w	r2, #2
 8001bb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	f003 0303 	and.w	r3, r3, #3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f000 f9b1 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8001bd0:	e005      	b.n	8001bde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bd2:	6878      	ldr	r0, [r7, #4]
 8001bd4:	f000 f9a4 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f9b3 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2200      	movs	r2, #0
 8001be2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	691b      	ldr	r3, [r3, #16]
 8001bea:	f003 0304 	and.w	r3, r3, #4
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	d122      	bne.n	8001c38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	f003 0304 	and.w	r3, r3, #4
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d11b      	bne.n	8001c38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f06f 0204 	mvn.w	r2, #4
 8001c08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2202      	movs	r2, #2
 8001c0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f000 f987 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8001c24:	e005      	b.n	8001c32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f97a 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f000 f989 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2200      	movs	r2, #0
 8001c36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	691b      	ldr	r3, [r3, #16]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b08      	cmp	r3, #8
 8001c44:	d122      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d11b      	bne.n	8001c8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f06f 0208 	mvn.w	r2, #8
 8001c5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2204      	movs	r2, #4
 8001c62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	69db      	ldr	r3, [r3, #28]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f95d 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8001c78:	e005      	b.n	8001c86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001c7a:	6878      	ldr	r0, [r7, #4]
 8001c7c:	f000 f950 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f000 f95f 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	691b      	ldr	r3, [r3, #16]
 8001c92:	f003 0310 	and.w	r3, r3, #16
 8001c96:	2b10      	cmp	r3, #16
 8001c98:	d122      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68db      	ldr	r3, [r3, #12]
 8001ca0:	f003 0310 	and.w	r3, r3, #16
 8001ca4:	2b10      	cmp	r3, #16
 8001ca6:	d11b      	bne.n	8001ce0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f06f 0210 	mvn.w	r2, #16
 8001cb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2208      	movs	r2, #8
 8001cb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d003      	beq.n	8001cce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f933 	bl	8001f32 <HAL_TIM_IC_CaptureCallback>
 8001ccc:	e005      	b.n	8001cda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f000 f926 	bl	8001f20 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cd4:	6878      	ldr	r0, [r7, #4]
 8001cd6:	f000 f935 	bl	8001f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d10e      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	68db      	ldr	r3, [r3, #12]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d107      	bne.n	8001d0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f06f 0201 	mvn.w	r2, #1
 8001d04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001d06:	6878      	ldr	r0, [r7, #4]
 8001d08:	f7fe fe48 	bl	800099c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	691b      	ldr	r3, [r3, #16]
 8001d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d16:	2b80      	cmp	r3, #128	; 0x80
 8001d18:	d10e      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d24:	2b80      	cmp	r3, #128	; 0x80
 8001d26:	d107      	bne.n	8001d38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001d30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	f000 fa77 	bl	8002226 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d42:	2b40      	cmp	r3, #64	; 0x40
 8001d44:	d10e      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	68db      	ldr	r3, [r3, #12]
 8001d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d50:	2b40      	cmp	r3, #64	; 0x40
 8001d52:	d107      	bne.n	8001d64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001d5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8f9 	bl	8001f56 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	691b      	ldr	r3, [r3, #16]
 8001d6a:	f003 0320 	and.w	r3, r3, #32
 8001d6e:	2b20      	cmp	r3, #32
 8001d70:	d10e      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	f003 0320 	and.w	r3, r3, #32
 8001d7c:	2b20      	cmp	r3, #32
 8001d7e:	d107      	bne.n	8001d90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f06f 0220 	mvn.w	r2, #32
 8001d88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 fa42 	bl	8002214 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b084      	sub	sp, #16
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d101      	bne.n	8001db0 <HAL_TIM_ConfigClockSource+0x18>
 8001dac:	2302      	movs	r3, #2
 8001dae:	e0b3      	b.n	8001f18 <HAL_TIM_ConfigClockSource+0x180>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2201      	movs	r2, #1
 8001db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2202      	movs	r2, #2
 8001dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001dce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dd6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001de8:	d03e      	beq.n	8001e68 <HAL_TIM_ConfigClockSource+0xd0>
 8001dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dee:	f200 8087 	bhi.w	8001f00 <HAL_TIM_ConfigClockSource+0x168>
 8001df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001df6:	f000 8085 	beq.w	8001f04 <HAL_TIM_ConfigClockSource+0x16c>
 8001dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001dfe:	d87f      	bhi.n	8001f00 <HAL_TIM_ConfigClockSource+0x168>
 8001e00:	2b70      	cmp	r3, #112	; 0x70
 8001e02:	d01a      	beq.n	8001e3a <HAL_TIM_ConfigClockSource+0xa2>
 8001e04:	2b70      	cmp	r3, #112	; 0x70
 8001e06:	d87b      	bhi.n	8001f00 <HAL_TIM_ConfigClockSource+0x168>
 8001e08:	2b60      	cmp	r3, #96	; 0x60
 8001e0a:	d050      	beq.n	8001eae <HAL_TIM_ConfigClockSource+0x116>
 8001e0c:	2b60      	cmp	r3, #96	; 0x60
 8001e0e:	d877      	bhi.n	8001f00 <HAL_TIM_ConfigClockSource+0x168>
 8001e10:	2b50      	cmp	r3, #80	; 0x50
 8001e12:	d03c      	beq.n	8001e8e <HAL_TIM_ConfigClockSource+0xf6>
 8001e14:	2b50      	cmp	r3, #80	; 0x50
 8001e16:	d873      	bhi.n	8001f00 <HAL_TIM_ConfigClockSource+0x168>
 8001e18:	2b40      	cmp	r3, #64	; 0x40
 8001e1a:	d058      	beq.n	8001ece <HAL_TIM_ConfigClockSource+0x136>
 8001e1c:	2b40      	cmp	r3, #64	; 0x40
 8001e1e:	d86f      	bhi.n	8001f00 <HAL_TIM_ConfigClockSource+0x168>
 8001e20:	2b30      	cmp	r3, #48	; 0x30
 8001e22:	d064      	beq.n	8001eee <HAL_TIM_ConfigClockSource+0x156>
 8001e24:	2b30      	cmp	r3, #48	; 0x30
 8001e26:	d86b      	bhi.n	8001f00 <HAL_TIM_ConfigClockSource+0x168>
 8001e28:	2b20      	cmp	r3, #32
 8001e2a:	d060      	beq.n	8001eee <HAL_TIM_ConfigClockSource+0x156>
 8001e2c:	2b20      	cmp	r3, #32
 8001e2e:	d867      	bhi.n	8001f00 <HAL_TIM_ConfigClockSource+0x168>
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d05c      	beq.n	8001eee <HAL_TIM_ConfigClockSource+0x156>
 8001e34:	2b10      	cmp	r3, #16
 8001e36:	d05a      	beq.n	8001eee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8001e38:	e062      	b.n	8001f00 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6818      	ldr	r0, [r3, #0]
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	6899      	ldr	r1, [r3, #8]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685a      	ldr	r2, [r3, #4]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	f000 f966 	bl	800211a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68fa      	ldr	r2, [r7, #12]
 8001e64:	609a      	str	r2, [r3, #8]
      break;
 8001e66:	e04e      	b.n	8001f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6818      	ldr	r0, [r3, #0]
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	6899      	ldr	r1, [r3, #8]
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	68db      	ldr	r3, [r3, #12]
 8001e78:	f000 f94f 	bl	800211a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001e8a:	609a      	str	r2, [r3, #8]
      break;
 8001e8c:	e03b      	b.n	8001f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6818      	ldr	r0, [r3, #0]
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	6859      	ldr	r1, [r3, #4]
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f000 f8c6 	bl	800202c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2150      	movs	r1, #80	; 0x50
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f91d 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001eac:	e02b      	b.n	8001f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6818      	ldr	r0, [r3, #0]
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	6859      	ldr	r1, [r3, #4]
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	461a      	mov	r2, r3
 8001ebc:	f000 f8e4 	bl	8002088 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2160      	movs	r1, #96	; 0x60
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f000 f90d 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001ecc:	e01b      	b.n	8001f06 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6859      	ldr	r1, [r3, #4]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f000 f8a6 	bl	800202c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2140      	movs	r1, #64	; 0x40
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 f8fd 	bl	80020e6 <TIM_ITRx_SetConfig>
      break;
 8001eec:	e00b      	b.n	8001f06 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4619      	mov	r1, r3
 8001ef8:	4610      	mov	r0, r2
 8001efa:	f000 f8f4 	bl	80020e6 <TIM_ITRx_SetConfig>
        break;
 8001efe:	e002      	b.n	8001f06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f00:	bf00      	nop
 8001f02:	e000      	b.n	8001f06 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8001f04:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001f16:	2300      	movs	r3, #0
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bc80      	pop	{r7}
 8001f30:	4770      	bx	lr

08001f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f32:	b480      	push	{r7}
 8001f34:	b083      	sub	sp, #12
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f3a:	bf00      	nop
 8001f3c:	370c      	adds	r7, #12
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bc80      	pop	{r7}
 8001f42:	4770      	bx	lr

08001f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f4c:	bf00      	nop
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f5e:	bf00      	nop
 8001f60:	370c      	adds	r7, #12
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bc80      	pop	{r7}
 8001f66:	4770      	bx	lr

08001f68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a29      	ldr	r2, [pc, #164]	; (8002020 <TIM_Base_SetConfig+0xb8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d00b      	beq.n	8001f98 <TIM_Base_SetConfig+0x30>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f86:	d007      	beq.n	8001f98 <TIM_Base_SetConfig+0x30>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	4a26      	ldr	r2, [pc, #152]	; (8002024 <TIM_Base_SetConfig+0xbc>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d003      	beq.n	8001f98 <TIM_Base_SetConfig+0x30>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	4a25      	ldr	r2, [pc, #148]	; (8002028 <TIM_Base_SetConfig+0xc0>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d108      	bne.n	8001faa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <TIM_Base_SetConfig+0xb8>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d00b      	beq.n	8001fca <TIM_Base_SetConfig+0x62>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fb8:	d007      	beq.n	8001fca <TIM_Base_SetConfig+0x62>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a19      	ldr	r2, [pc, #100]	; (8002024 <TIM_Base_SetConfig+0xbc>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d003      	beq.n	8001fca <TIM_Base_SetConfig+0x62>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a18      	ldr	r2, [pc, #96]	; (8002028 <TIM_Base_SetConfig+0xc0>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d108      	bne.n	8001fdc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	68fa      	ldr	r2, [r7, #12]
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4a07      	ldr	r2, [pc, #28]	; (8002020 <TIM_Base_SetConfig+0xb8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d103      	bne.n	8002010 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	691a      	ldr	r2, [r3, #16]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2201      	movs	r2, #1
 8002014:	615a      	str	r2, [r3, #20]
}
 8002016:	bf00      	nop
 8002018:	3714      	adds	r7, #20
 800201a:	46bd      	mov	sp, r7
 800201c:	bc80      	pop	{r7}
 800201e:	4770      	bx	lr
 8002020:	40012c00 	.word	0x40012c00
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800

0800202c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800202c:	b480      	push	{r7}
 800202e:	b087      	sub	sp, #28
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	6a1b      	ldr	r3, [r3, #32]
 800203c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f023 0201 	bic.w	r2, r3, #1
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	699b      	ldr	r3, [r3, #24]
 800204e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002056:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	011b      	lsls	r3, r3, #4
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f023 030a 	bic.w	r3, r3, #10
 8002068:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800206a:	697a      	ldr	r2, [r7, #20]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	4313      	orrs	r3, r2
 8002070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	693a      	ldr	r2, [r7, #16]
 8002076:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	697a      	ldr	r2, [r7, #20]
 800207c:	621a      	str	r2, [r3, #32]
}
 800207e:	bf00      	nop
 8002080:	371c      	adds	r7, #28
 8002082:	46bd      	mov	sp, r7
 8002084:	bc80      	pop	{r7}
 8002086:	4770      	bx	lr

08002088 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002088:	b480      	push	{r7}
 800208a:	b087      	sub	sp, #28
 800208c:	af00      	add	r7, sp, #0
 800208e:	60f8      	str	r0, [r7, #12]
 8002090:	60b9      	str	r1, [r7, #8]
 8002092:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6a1b      	ldr	r3, [r3, #32]
 8002098:	f023 0210 	bic.w	r2, r3, #16
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80020b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	031b      	lsls	r3, r3, #12
 80020b8:	697a      	ldr	r2, [r7, #20]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80020c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	011b      	lsls	r3, r3, #4
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	4313      	orrs	r3, r2
 80020ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	621a      	str	r2, [r3, #32]
}
 80020dc:	bf00      	nop
 80020de:	371c      	adds	r7, #28
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bc80      	pop	{r7}
 80020e4:	4770      	bx	lr

080020e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80020e6:	b480      	push	{r7}
 80020e8:	b085      	sub	sp, #20
 80020ea:	af00      	add	r7, sp, #0
 80020ec:	6078      	str	r0, [r7, #4]
 80020ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	4313      	orrs	r3, r2
 8002104:	f043 0307 	orr.w	r3, r3, #7
 8002108:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	609a      	str	r2, [r3, #8]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	bc80      	pop	{r7}
 8002118:	4770      	bx	lr

0800211a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800211a:	b480      	push	{r7}
 800211c:	b087      	sub	sp, #28
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
 8002126:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002134:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	021a      	lsls	r2, r3, #8
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	431a      	orrs	r2, r3
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	4313      	orrs	r3, r2
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4313      	orrs	r3, r2
 8002146:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	609a      	str	r2, [r3, #8]
}
 800214e:	bf00      	nop
 8002150:	371c      	adds	r7, #28
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr

08002158 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002158:	b480      	push	{r7}
 800215a:	b085      	sub	sp, #20
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800216c:	2302      	movs	r3, #2
 800216e:	e046      	b.n	80021fe <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2202      	movs	r2, #2
 800217c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002196:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4313      	orrs	r3, r2
 80021a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	68fa      	ldr	r2, [r7, #12]
 80021a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00e      	beq.n	80021d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021bc:	d009      	beq.n	80021d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d004      	beq.n	80021d2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a10      	ldr	r2, [pc, #64]	; (8002210 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d10c      	bne.n	80021ec <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80021d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	68ba      	ldr	r2, [r7, #8]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68ba      	ldr	r2, [r7, #8]
 80021ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	2201      	movs	r2, #1
 80021f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	4618      	mov	r0, r3
 8002200:	3714      	adds	r7, #20
 8002202:	46bd      	mov	sp, r7
 8002204:	bc80      	pop	{r7}
 8002206:	4770      	bx	lr
 8002208:	40012c00 	.word	0x40012c00
 800220c:	40000400 	.word	0x40000400
 8002210:	40000800 	.word	0x40000800

08002214 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002214:	b480      	push	{r7}
 8002216:	b083      	sub	sp, #12
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	bc80      	pop	{r7}
 8002224:	4770      	bx	lr

08002226 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002226:	b480      	push	{r7}
 8002228:	b083      	sub	sp, #12
 800222a:	af00      	add	r7, sp, #0
 800222c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <__errno>:
 8002238:	4b01      	ldr	r3, [pc, #4]	; (8002240 <__errno+0x8>)
 800223a:	6818      	ldr	r0, [r3, #0]
 800223c:	4770      	bx	lr
 800223e:	bf00      	nop
 8002240:	20000010 	.word	0x20000010

08002244 <__libc_init_array>:
 8002244:	b570      	push	{r4, r5, r6, lr}
 8002246:	2600      	movs	r6, #0
 8002248:	4d0c      	ldr	r5, [pc, #48]	; (800227c <__libc_init_array+0x38>)
 800224a:	4c0d      	ldr	r4, [pc, #52]	; (8002280 <__libc_init_array+0x3c>)
 800224c:	1b64      	subs	r4, r4, r5
 800224e:	10a4      	asrs	r4, r4, #2
 8002250:	42a6      	cmp	r6, r4
 8002252:	d109      	bne.n	8002268 <__libc_init_array+0x24>
 8002254:	f000 f92c 	bl	80024b0 <_init>
 8002258:	2600      	movs	r6, #0
 800225a:	4d0a      	ldr	r5, [pc, #40]	; (8002284 <__libc_init_array+0x40>)
 800225c:	4c0a      	ldr	r4, [pc, #40]	; (8002288 <__libc_init_array+0x44>)
 800225e:	1b64      	subs	r4, r4, r5
 8002260:	10a4      	asrs	r4, r4, #2
 8002262:	42a6      	cmp	r6, r4
 8002264:	d105      	bne.n	8002272 <__libc_init_array+0x2e>
 8002266:	bd70      	pop	{r4, r5, r6, pc}
 8002268:	f855 3b04 	ldr.w	r3, [r5], #4
 800226c:	4798      	blx	r3
 800226e:	3601      	adds	r6, #1
 8002270:	e7ee      	b.n	8002250 <__libc_init_array+0xc>
 8002272:	f855 3b04 	ldr.w	r3, [r5], #4
 8002276:	4798      	blx	r3
 8002278:	3601      	adds	r6, #1
 800227a:	e7f2      	b.n	8002262 <__libc_init_array+0x1e>
 800227c:	080024e8 	.word	0x080024e8
 8002280:	080024e8 	.word	0x080024e8
 8002284:	080024e8 	.word	0x080024e8
 8002288:	080024ec 	.word	0x080024ec

0800228c <malloc>:
 800228c:	4b02      	ldr	r3, [pc, #8]	; (8002298 <malloc+0xc>)
 800228e:	4601      	mov	r1, r0
 8002290:	6818      	ldr	r0, [r3, #0]
 8002292:	f000 b87b 	b.w	800238c <_malloc_r>
 8002296:	bf00      	nop
 8002298:	20000010 	.word	0x20000010

0800229c <free>:
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <free+0xc>)
 800229e:	4601      	mov	r1, r0
 80022a0:	6818      	ldr	r0, [r3, #0]
 80022a2:	f000 b80b 	b.w	80022bc <_free_r>
 80022a6:	bf00      	nop
 80022a8:	20000010 	.word	0x20000010

080022ac <memset>:
 80022ac:	4603      	mov	r3, r0
 80022ae:	4402      	add	r2, r0
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d100      	bne.n	80022b6 <memset+0xa>
 80022b4:	4770      	bx	lr
 80022b6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ba:	e7f9      	b.n	80022b0 <memset+0x4>

080022bc <_free_r>:
 80022bc:	b538      	push	{r3, r4, r5, lr}
 80022be:	4605      	mov	r5, r0
 80022c0:	2900      	cmp	r1, #0
 80022c2:	d040      	beq.n	8002346 <_free_r+0x8a>
 80022c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80022c8:	1f0c      	subs	r4, r1, #4
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	bfb8      	it	lt
 80022ce:	18e4      	addlt	r4, r4, r3
 80022d0:	f000 f8e0 	bl	8002494 <__malloc_lock>
 80022d4:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <_free_r+0x8c>)
 80022d6:	6813      	ldr	r3, [r2, #0]
 80022d8:	b933      	cbnz	r3, 80022e8 <_free_r+0x2c>
 80022da:	6063      	str	r3, [r4, #4]
 80022dc:	6014      	str	r4, [r2, #0]
 80022de:	4628      	mov	r0, r5
 80022e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80022e4:	f000 b8dc 	b.w	80024a0 <__malloc_unlock>
 80022e8:	42a3      	cmp	r3, r4
 80022ea:	d908      	bls.n	80022fe <_free_r+0x42>
 80022ec:	6820      	ldr	r0, [r4, #0]
 80022ee:	1821      	adds	r1, r4, r0
 80022f0:	428b      	cmp	r3, r1
 80022f2:	bf01      	itttt	eq
 80022f4:	6819      	ldreq	r1, [r3, #0]
 80022f6:	685b      	ldreq	r3, [r3, #4]
 80022f8:	1809      	addeq	r1, r1, r0
 80022fa:	6021      	streq	r1, [r4, #0]
 80022fc:	e7ed      	b.n	80022da <_free_r+0x1e>
 80022fe:	461a      	mov	r2, r3
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	b10b      	cbz	r3, 8002308 <_free_r+0x4c>
 8002304:	42a3      	cmp	r3, r4
 8002306:	d9fa      	bls.n	80022fe <_free_r+0x42>
 8002308:	6811      	ldr	r1, [r2, #0]
 800230a:	1850      	adds	r0, r2, r1
 800230c:	42a0      	cmp	r0, r4
 800230e:	d10b      	bne.n	8002328 <_free_r+0x6c>
 8002310:	6820      	ldr	r0, [r4, #0]
 8002312:	4401      	add	r1, r0
 8002314:	1850      	adds	r0, r2, r1
 8002316:	4283      	cmp	r3, r0
 8002318:	6011      	str	r1, [r2, #0]
 800231a:	d1e0      	bne.n	80022de <_free_r+0x22>
 800231c:	6818      	ldr	r0, [r3, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4401      	add	r1, r0
 8002322:	6011      	str	r1, [r2, #0]
 8002324:	6053      	str	r3, [r2, #4]
 8002326:	e7da      	b.n	80022de <_free_r+0x22>
 8002328:	d902      	bls.n	8002330 <_free_r+0x74>
 800232a:	230c      	movs	r3, #12
 800232c:	602b      	str	r3, [r5, #0]
 800232e:	e7d6      	b.n	80022de <_free_r+0x22>
 8002330:	6820      	ldr	r0, [r4, #0]
 8002332:	1821      	adds	r1, r4, r0
 8002334:	428b      	cmp	r3, r1
 8002336:	bf01      	itttt	eq
 8002338:	6819      	ldreq	r1, [r3, #0]
 800233a:	685b      	ldreq	r3, [r3, #4]
 800233c:	1809      	addeq	r1, r1, r0
 800233e:	6021      	streq	r1, [r4, #0]
 8002340:	6063      	str	r3, [r4, #4]
 8002342:	6054      	str	r4, [r2, #4]
 8002344:	e7cb      	b.n	80022de <_free_r+0x22>
 8002346:	bd38      	pop	{r3, r4, r5, pc}
 8002348:	20000100 	.word	0x20000100

0800234c <sbrk_aligned>:
 800234c:	b570      	push	{r4, r5, r6, lr}
 800234e:	4e0e      	ldr	r6, [pc, #56]	; (8002388 <sbrk_aligned+0x3c>)
 8002350:	460c      	mov	r4, r1
 8002352:	6831      	ldr	r1, [r6, #0]
 8002354:	4605      	mov	r5, r0
 8002356:	b911      	cbnz	r1, 800235e <sbrk_aligned+0x12>
 8002358:	f000 f88c 	bl	8002474 <_sbrk_r>
 800235c:	6030      	str	r0, [r6, #0]
 800235e:	4621      	mov	r1, r4
 8002360:	4628      	mov	r0, r5
 8002362:	f000 f887 	bl	8002474 <_sbrk_r>
 8002366:	1c43      	adds	r3, r0, #1
 8002368:	d00a      	beq.n	8002380 <sbrk_aligned+0x34>
 800236a:	1cc4      	adds	r4, r0, #3
 800236c:	f024 0403 	bic.w	r4, r4, #3
 8002370:	42a0      	cmp	r0, r4
 8002372:	d007      	beq.n	8002384 <sbrk_aligned+0x38>
 8002374:	1a21      	subs	r1, r4, r0
 8002376:	4628      	mov	r0, r5
 8002378:	f000 f87c 	bl	8002474 <_sbrk_r>
 800237c:	3001      	adds	r0, #1
 800237e:	d101      	bne.n	8002384 <sbrk_aligned+0x38>
 8002380:	f04f 34ff 	mov.w	r4, #4294967295
 8002384:	4620      	mov	r0, r4
 8002386:	bd70      	pop	{r4, r5, r6, pc}
 8002388:	20000104 	.word	0x20000104

0800238c <_malloc_r>:
 800238c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002390:	1ccd      	adds	r5, r1, #3
 8002392:	f025 0503 	bic.w	r5, r5, #3
 8002396:	3508      	adds	r5, #8
 8002398:	2d0c      	cmp	r5, #12
 800239a:	bf38      	it	cc
 800239c:	250c      	movcc	r5, #12
 800239e:	2d00      	cmp	r5, #0
 80023a0:	4607      	mov	r7, r0
 80023a2:	db01      	blt.n	80023a8 <_malloc_r+0x1c>
 80023a4:	42a9      	cmp	r1, r5
 80023a6:	d905      	bls.n	80023b4 <_malloc_r+0x28>
 80023a8:	230c      	movs	r3, #12
 80023aa:	2600      	movs	r6, #0
 80023ac:	603b      	str	r3, [r7, #0]
 80023ae:	4630      	mov	r0, r6
 80023b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80023b4:	4e2e      	ldr	r6, [pc, #184]	; (8002470 <_malloc_r+0xe4>)
 80023b6:	f000 f86d 	bl	8002494 <__malloc_lock>
 80023ba:	6833      	ldr	r3, [r6, #0]
 80023bc:	461c      	mov	r4, r3
 80023be:	bb34      	cbnz	r4, 800240e <_malloc_r+0x82>
 80023c0:	4629      	mov	r1, r5
 80023c2:	4638      	mov	r0, r7
 80023c4:	f7ff ffc2 	bl	800234c <sbrk_aligned>
 80023c8:	1c43      	adds	r3, r0, #1
 80023ca:	4604      	mov	r4, r0
 80023cc:	d14d      	bne.n	800246a <_malloc_r+0xde>
 80023ce:	6834      	ldr	r4, [r6, #0]
 80023d0:	4626      	mov	r6, r4
 80023d2:	2e00      	cmp	r6, #0
 80023d4:	d140      	bne.n	8002458 <_malloc_r+0xcc>
 80023d6:	6823      	ldr	r3, [r4, #0]
 80023d8:	4631      	mov	r1, r6
 80023da:	4638      	mov	r0, r7
 80023dc:	eb04 0803 	add.w	r8, r4, r3
 80023e0:	f000 f848 	bl	8002474 <_sbrk_r>
 80023e4:	4580      	cmp	r8, r0
 80023e6:	d13a      	bne.n	800245e <_malloc_r+0xd2>
 80023e8:	6821      	ldr	r1, [r4, #0]
 80023ea:	3503      	adds	r5, #3
 80023ec:	1a6d      	subs	r5, r5, r1
 80023ee:	f025 0503 	bic.w	r5, r5, #3
 80023f2:	3508      	adds	r5, #8
 80023f4:	2d0c      	cmp	r5, #12
 80023f6:	bf38      	it	cc
 80023f8:	250c      	movcc	r5, #12
 80023fa:	4638      	mov	r0, r7
 80023fc:	4629      	mov	r1, r5
 80023fe:	f7ff ffa5 	bl	800234c <sbrk_aligned>
 8002402:	3001      	adds	r0, #1
 8002404:	d02b      	beq.n	800245e <_malloc_r+0xd2>
 8002406:	6823      	ldr	r3, [r4, #0]
 8002408:	442b      	add	r3, r5
 800240a:	6023      	str	r3, [r4, #0]
 800240c:	e00e      	b.n	800242c <_malloc_r+0xa0>
 800240e:	6822      	ldr	r2, [r4, #0]
 8002410:	1b52      	subs	r2, r2, r5
 8002412:	d41e      	bmi.n	8002452 <_malloc_r+0xc6>
 8002414:	2a0b      	cmp	r2, #11
 8002416:	d916      	bls.n	8002446 <_malloc_r+0xba>
 8002418:	1961      	adds	r1, r4, r5
 800241a:	42a3      	cmp	r3, r4
 800241c:	6025      	str	r5, [r4, #0]
 800241e:	bf18      	it	ne
 8002420:	6059      	strne	r1, [r3, #4]
 8002422:	6863      	ldr	r3, [r4, #4]
 8002424:	bf08      	it	eq
 8002426:	6031      	streq	r1, [r6, #0]
 8002428:	5162      	str	r2, [r4, r5]
 800242a:	604b      	str	r3, [r1, #4]
 800242c:	4638      	mov	r0, r7
 800242e:	f104 060b 	add.w	r6, r4, #11
 8002432:	f000 f835 	bl	80024a0 <__malloc_unlock>
 8002436:	f026 0607 	bic.w	r6, r6, #7
 800243a:	1d23      	adds	r3, r4, #4
 800243c:	1af2      	subs	r2, r6, r3
 800243e:	d0b6      	beq.n	80023ae <_malloc_r+0x22>
 8002440:	1b9b      	subs	r3, r3, r6
 8002442:	50a3      	str	r3, [r4, r2]
 8002444:	e7b3      	b.n	80023ae <_malloc_r+0x22>
 8002446:	6862      	ldr	r2, [r4, #4]
 8002448:	42a3      	cmp	r3, r4
 800244a:	bf0c      	ite	eq
 800244c:	6032      	streq	r2, [r6, #0]
 800244e:	605a      	strne	r2, [r3, #4]
 8002450:	e7ec      	b.n	800242c <_malloc_r+0xa0>
 8002452:	4623      	mov	r3, r4
 8002454:	6864      	ldr	r4, [r4, #4]
 8002456:	e7b2      	b.n	80023be <_malloc_r+0x32>
 8002458:	4634      	mov	r4, r6
 800245a:	6876      	ldr	r6, [r6, #4]
 800245c:	e7b9      	b.n	80023d2 <_malloc_r+0x46>
 800245e:	230c      	movs	r3, #12
 8002460:	4638      	mov	r0, r7
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	f000 f81c 	bl	80024a0 <__malloc_unlock>
 8002468:	e7a1      	b.n	80023ae <_malloc_r+0x22>
 800246a:	6025      	str	r5, [r4, #0]
 800246c:	e7de      	b.n	800242c <_malloc_r+0xa0>
 800246e:	bf00      	nop
 8002470:	20000100 	.word	0x20000100

08002474 <_sbrk_r>:
 8002474:	b538      	push	{r3, r4, r5, lr}
 8002476:	2300      	movs	r3, #0
 8002478:	4d05      	ldr	r5, [pc, #20]	; (8002490 <_sbrk_r+0x1c>)
 800247a:	4604      	mov	r4, r0
 800247c:	4608      	mov	r0, r1
 800247e:	602b      	str	r3, [r5, #0]
 8002480:	f7fe fb1a 	bl	8000ab8 <_sbrk>
 8002484:	1c43      	adds	r3, r0, #1
 8002486:	d102      	bne.n	800248e <_sbrk_r+0x1a>
 8002488:	682b      	ldr	r3, [r5, #0]
 800248a:	b103      	cbz	r3, 800248e <_sbrk_r+0x1a>
 800248c:	6023      	str	r3, [r4, #0]
 800248e:	bd38      	pop	{r3, r4, r5, pc}
 8002490:	20000108 	.word	0x20000108

08002494 <__malloc_lock>:
 8002494:	4801      	ldr	r0, [pc, #4]	; (800249c <__malloc_lock+0x8>)
 8002496:	f000 b809 	b.w	80024ac <__retarget_lock_acquire_recursive>
 800249a:	bf00      	nop
 800249c:	2000010c 	.word	0x2000010c

080024a0 <__malloc_unlock>:
 80024a0:	4801      	ldr	r0, [pc, #4]	; (80024a8 <__malloc_unlock+0x8>)
 80024a2:	f000 b804 	b.w	80024ae <__retarget_lock_release_recursive>
 80024a6:	bf00      	nop
 80024a8:	2000010c 	.word	0x2000010c

080024ac <__retarget_lock_acquire_recursive>:
 80024ac:	4770      	bx	lr

080024ae <__retarget_lock_release_recursive>:
 80024ae:	4770      	bx	lr

080024b0 <_init>:
 80024b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b2:	bf00      	nop
 80024b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024b6:	bc08      	pop	{r3}
 80024b8:	469e      	mov	lr, r3
 80024ba:	4770      	bx	lr

080024bc <_fini>:
 80024bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024be:	bf00      	nop
 80024c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c2:	bc08      	pop	{r3}
 80024c4:	469e      	mov	lr, r3
 80024c6:	4770      	bx	lr
